I have 3 springboot microservices - Discovery service, Gateway service, member service. For each one we have application-docker.yml and application.yml.


Discovery service

application-docker.yml..

server:
    port: 8761

## Eureka Server
spring:
    application:
        name: discovery-service
    security: 
        user: 
            name: eureka
            password: password
    cloud:
        compatibility-verifier: 
            enabled: false

eureka:
    instance:
        hostname: localhost
    client:
        register-with-eureka: true
        fetch-registry: true            
        serviceUrl:
            defaultZone: http://localhost:8761/eureka/


# Actuator Prometheus Endpoint
management:
    zipkin:
        tracing:
            endpoint: http://localhost:9411/api/v2/spans
    tracing:        
        sampling:
            probability: 1.0
    endpoints:
        web:
            exposure:
                include: prometheus

logging:
    pattern:
        level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
    level: 
        org: 
            springframework: 
                security: DEBUG

application.yml..

same as application-docker.yml



Gateway service

application-docker.yml..

server:
    port: 8181

## Gateway
spring:
    application:
        name: gateway-service
    cloud:
        loadbalancer:
            ribbon:
                enabled: false
        gateway:
            globalcors:
                add-to-simple-url-handler-mapping: true
                cors-configurations:
                    '[/**]':
                        allow-credentials: true
                        # allowed-origins: '*'
                        # allowed-headers: '*'
                        allowed-methods: 
                            - OPTIONS
                            - GET
                            - POST
                            - PUT
            ## Discover Server Route
            routes[0]:
                id: discovery-server
                uri: http://discovery-server:8761
                predicates[0]: Path=/eureka/web
                filters[0]: SetPath=/
            ## Discover Server Static Resources Route
            routes[1]:
                id: discovery-server-static
                uri: http://discovery-server:8761
                predicates[0]: Path=/eureka/**
            ## Member Service Route
            routes[2]:
                id: member-service
                # uri: lb://member-service
                uri: http://member-service:8900/
                predicates[0]:
                    name: Path
                    args:
                        pattern: /member/**
            ## Member Service Route
            routes[3]:
                id: ess-service
                # uri: lb://ess-service
                uri: http://ess-server:8901/
                predicates[0]:
                    name: Path
                    args:
                        pattern: /ess/**
            ## Member Service Route
            routes[4]:
                id: admin-service
                # uri: lb://admin-service
                uri: http://admin-server:8902/
                predicates[0]:
                    name: Path
                    args:
                        pattern: /admin/**
        compatibility-verifier: 
            enabled: false
    # security: 
    #     oauth2: 
    #         resourceserver: 
    #             jwt: 
    #                 issuer-uri: http://localhost:8080/realms/atlas
eureka:
    client:
        serviceUrl:
            defaultZone: http://discovery-service:8761/eureka
logging:
    pattern:
        level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"


# Can be set to false to disable security during local development
rest: 
    security:
        enabled: false
        api-matcher: /**
        issuer-uri: http://localhost:8080/auth/realms/atlas
        resource-id: atlasclient


application.yml..

same as application-docker.yml



Member service

application-docker.yml..

server:
    port: 8900

spring:
    main:
        allow-bean-definition-overriding: true
    application:
        name: member-service
    datasource:
        url: jdbc:sqlserver://orsomp.public.f3ff59b0e371.database.windows.net:3342;databaseName=applicationConfig
        driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver
        username: appuser
        password: Love!4zure
    jpa:
        show-sql: true
        properties:
            hibernate:
                format_sql: true
                dialect: org.hibernate.dialect.SQLServer2016Dialect

    cloud:
        compatibility-verifier: 
            enabled: false
        config:
            enabled: false

logging:
    pattern:
        level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"


eureka:
    client:
        serviceUrl:
            defaultZone: http://discovery-service:8761/eureka

springdoc:
    api-docs:
        path: /api-docs
    swagger-ui:
        enabled: true
        path: /swagger-ui.html
        #use-root-path: true
    version: '@springdoc.version@'
    show-actuator: false


application.yml..

same as application-docker.yml


And I have docker-compose.yml given below.

docker-compose.yml..

version: "3.7"
services:

  oauth2-proxy:
    image: bitnami/oauth2-proxy:7.3.0
    command:
      - --http-address
      - 0.0.0.0:4180
    environment:
      OAUTH2_PROXY_EMAIL_DOMAINS: '*'
      OAUTH2_PROXY_PROVIDER: oidc
      OAUTH2_PROXY_PROVIDER_DISPLAY_NAME: Okta
      OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: "true"
      OAUTH2_PROXY_REDIRECT_URL: http://localhost:81/oauth2/callback

      OAUTH2_PROXY_OIDC_ISSUER_URL: ${ISSUER}
      OAUTH2_PROXY_CLIENT_ID: ${CLIENT_ID}
      OAUTH2_PROXY_CLIENT_SECRET: ${CLIENT_SECRET}

      OAUTH2_PROXY_SKIP_JWT_BEARER_TOKENS: "true"
      OAUTH2_PROXY_OIDC_EXTRA_AUDIENCES: api://default
      OAUTH2_PROXY_OIDC_EMAIL_CLAIM: sub

      OAUTH2_PROXY_SET_XAUTHREQUEST: "true"
      OAUTH2_PROXY_PASS_ACCESS_TOKEN: "true"
      
      OAUTH2_PROXY_COOKIE_REFRESH: 30m
      OAUTH2_PROXY_COOKIE_NAME: SESSION
      OAUTH2_PROXY_COOKIE_SECRET: ${OAUTH2_PROXY_COOKIE_SECRET}

  nginx:
      image: nginx:1.21.6-alpine
      depends_on:
        - oauth2-proxy
        - gateway-service
      volumes:
        - ./nginx-default.conf.template:/etc/nginx/templates/default.conf.template
        - ./static-html:/usr/share/nginx/html 
      ports:
        - 81:81 

  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  ## Eureka Server
  discovery-service:
    build:
      context: ./discovery
      dockerfile: ./Dockerfile
    image: atlas-services/discovery-service:latest
    container_name: discovery-service
    ports:
      - "8761:8761"
    expose:
      - "8761"  
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin

  gateway-service:
    build:
      context: ./gateway
      dockerfile: ./Dockerfile  
    image: atlas-services/gateway-service:latest
    container_name: gateway-service
    ports:
      - "8181:8181"
    expose:
      - "8181"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      - zipkin
      - discovery-service

  ## Member-Service Docker Compose Config
  member-service:
    build:
      context: ./member
      dockerfile: ./Dockerfile    
    image: atlas-services/member-service:latest
    container_name: member-service
    ports:
      - "8900:8900"
    expose:
      - "8900"  
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:sqlserver://orsomp.public.f3ff59b0e371.database.windows.net:3342;databaseName=applicationConfig
    depends_on:  
      - discovery-service
      - gateway-service
