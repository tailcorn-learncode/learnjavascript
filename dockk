server:
    port: 8181

## Gateway
spring:
    application:
        name: gateway-service
    cloud:
        loadbalancer:
            ribbon:
                enabled: false
        gateway:
            globalcors:
                add-to-simple-url-handler-mapping: true
                cors-configurations:
                    '[/**]':
                        allow-credentials: true
                        # allowed-origins: '*'
                        # allowed-headers: '*'
                        allowed-methods: 
                            - OPTIONS
                            - GET
                            - POST
                            - PUT
            ## Discover Server Route
            routes[0]:
                id: discovery-server
                uri: http://localhost:8761
                predicates[0]: Path=/eureka/web
                filters[0]: SetPath=/
            ## Discover Server Static Resources Route
            routes[1]:
                id: discovery-server-static
                uri: http://localhost:8761
                predicates[0]: Path=/eureka/**
            ## Member Service Route
            routes[2]:
                id: member-service
                # uri: lb://member-service
                uri: http://localhost:8900/
                predicates[0]:
                    name: Path
                    args:
                        pattern: /member/**
            ## Member Service Route
            routes[3]:
                id: ess-service
                # uri: lb://ess-service
                uri: http://localhost:8901/
                predicates[0]:
                    name: Path
                    args:
                        pattern: /ess/**
            ## Admin Service Route
            routes[4]:
                id: admin-service
                # uri: lb://admin-service
                uri: http://localhost:8902/
                predicates[0]:
                    name: Path
                    args:
                        pattern: /admin/**
        compatibility-verifier: 
            enabled: false
    # security: 
    #     oauth2: 
    #         resourceserver: 
    #             jwt: 
    #                 issuer-uri: http://localhost:8080/realms/atlas
eureka:
    client:
        serviceUrl:
            defaultZone: http://localhost:8761/eureka


# Actuator Prometheus Endpoint
# management:
#     zipkin:
#         tracing:
#             endpoint: http://localhost:9411/api/v2/spans
#     tracing:        
#         sampling:
#             probability: 1.0
#     endpoints:
#         web:
#             exposure:
#                 include: prometheus

logging:
    pattern:
        level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"


# Can be set to false to disable security during local development
# rest: 
#     security:
#         enabled: false
#         api-matcher: /**
#         issuer-uri: http://localhost:8080/auth/realms/atlas
#         resource-id: atlasclient
# okta: 
#     oauth2: 
#         issuer: https://dev-04798219.okta.com/oauth2/default
#         client-id: 0oabg7kppraYTKmpX5d7
#         client-secret: JP0OSLwhTdJ-VIH4KIuuSglQ01SSiISyfYF8PuBbZgoScJjxi-y_R75hAPMqys9l

okta: 
    oauth2: 
        issuer: https://dev-04798219.okta.com/oauth2/default
        client-id: 0oabjwzqyhAd1VsxX5d7
        client-secret: ulsmzHE7Y3qUORZf5pzHldaWC-E9rrnlD8eHS2oMM7hsy3RUPEmIOaocoRTWxSDl






package com.yourpackage.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Value("${security.okta.enabled}")
    private boolean isOktaSecurityEnabled;

    @Bean
    public SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {
        if (isOktaSecurityEnabled) {
            http
                .oauth2Login()
                .and()
                .oauth2ResourceServer().jwt()
                .and()
                .authorizeRequests()
                .anyRequest().authenticated();
        } else {
            http
                .authorizeRequests()
                .antMatchers("/**").permitAll()
                .and()
                .csrf().disable();
        }

        return http.build();
    }
}


        



