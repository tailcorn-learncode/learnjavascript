public class InvalidCredentialsException extends RuntimeException {
    public InvalidCredentialsException(String message) {
        super(message);
    }
}



@PostMapping("/login")
public ResponseEntity<?> authenticateUser(@RequestBody LoginRequest loginRequest) {

    Authentication authentication = authenticationManager.authenticate(
        new UsernamePasswordAuthenticationToken(
            loginRequest.getUsername(),
            loginRequest.getPassword()
        )
    );

    SecurityContextHolder.getContext().setAuthentication(authentication);

    String jwt = jwtProvider.generateJwtToken(authentication);
    return ResponseEntity.ok(new JwtResponse(jwt));
}

if (!authentication.isAuthenticated()) {
    throw new InvalidCredentialsException("Invalid username or password");
}



@ControllerAdvice
public class RestExceptionHandler {

    @ExceptionHandler(value = { InvalidCredentialsException.class })
    protected ResponseEntity<Object> handleInvalidCredentialsException(InvalidCredentialsException ex) {
        return new ResponseEntity<>(new ApiResponse(false, ex.getMessage()), HttpStatus.UNAUTHORIZED);
    }
}



@Injectable({
  providedIn: 'root'
})
export class AuthService {
  login(username: string, password: string): Observable<JwtResponse> {
    return this.http.post<JwtResponse>('/api/auth/login', { username, password })
      .pipe(
        catchError((error: HttpErrorResponse) => {
          if (error.status === 401) {
            // Display an error message to the user
            this.snackBar.open('Invalid username or password', 'Close', { duration: 3000 });
          }
          return throwError(error);
        })
      );
  }
}
