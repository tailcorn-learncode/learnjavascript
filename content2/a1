
package com.example.gateway;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;
import org.springframework.security.config.web.server.ServerHttpSecurity;
import org.springframework.security.web.server.SecurityWebFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.reactive.CorsConfigurationSource;
import org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;
import java.util.Arrays;

@Configuration
@EnableWebFluxSecurity
public class SecurityConfig {

    @Bean
    public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {
        http
            .csrf().disable() // Disable CSRF protection
            .cors().configurationSource(corsConfigurationSource()) // Enable and configure CORS
            .and()
            .authorizeExchange(exchanges -> exchanges
                .pathMatchers("/gateway/api/**").authenticated()
                .anyExchange().permitAll()
            )
            .oauth2ResourceServer(ServerHttpSecurity.OAuth2ResourceServerSpec::jwt);
        return http.build();
    }

    @Bean
    CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(Arrays.asList("*")); // Allow all origins
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS")); // Allow specific HTTP methods
        configuration.setAllowedHeaders(Arrays.asList("*")); // Allow all headers
        configuration.setAllowCredentials(true); // Allow credentials
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}




server:
  port: 8181

## Gateway
spring:
  main:
    web-application-type: reactive
  application:
    name: gateway-service
  cloud:
    loadbalancer:
      ribbon:
        enabled: false
    gateway:
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
      globalcors:
        add-to-simple-url-handler-mapping: true
        cors-configurations:
          "[/**]":
            allow-credentials: false
            allowed-origins: "*"
            allowed-headers: "*"
            allowed-methods:
              - OPTIONS
              - GET
              - POST
              - PUT
              - PATCH
      routes:
        # Your existing route configurations
    compatibility-verifier:
      enabled: false
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: YOUR_ISSUER_URI
          jwk-set-uri: https://login.microsoftonline.com/YOUR_TENANT_ID/discovery/v2.0/keys



package com.example.gateway;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;
import org.springframework.security.config.web.server.ServerHttpSecurity;
import org.springframework.security.web.server.SecurityWebFilterChain;

@Configuration
@EnableWebFluxSecurity
public class SecurityConfig {

    @Bean
    public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {
        http
            .authorizeExchange(exchanges -> exchanges
                .pathMatchers("/gateway/api/**").authenticated()
                .anyExchange().permitAll()
            )
            .oauth2ResourceServer(ServerHttpSecurity.OAuth2ResourceServerSpec::jwt);
        return http.build();
    }
}








spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: YOUR_ISSUER_URI
          jwk-set-uri: https://login.microsoftonline.com/YOUR_TENANT_ID/discovery/v2.0/keys



package com.example.demo;

import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests(authz -> authz
                .antMatchers("/hello").authenticated()
                .anyRequest().permitAll()
            )
            .oauth2ResourceServer(oauth2 -> oauth2.jwt());
    }
}

server:
  port: 8181

## Gateway
spring:
  main:
    web-application-type: reactive
  application:
    name: gateway-service
  cloud:
    loadbalancer:
      ribbon:
        enabled: false
    gateway:
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
      globalcors:
        add-to-simple-url-handler-mapping: true
        cors-configurations:
          "[/**]":
            allow-credentials: false
            allowed-origins: "*"
            allowed-headers: "*"
            allowed-methods:
              - OPTIONS
              - GET
              - POST
              - PUT
              - PATCH
      routes:
        - id: discovery-server
          uri: http://localhost:8761
          predicates:
            - Path=/eureka/web
          filters:
            - SetPath=/

        - id: discovery-server-static
          uri: http://localhost:8761
          predicates:
            - Path=/eureka/**

        - id: admin-service
          # uri: lb://admin-service
          uri: http://localhost:8900
          predicates:
            - Header=apicode, atlas
            - Header=accesscode, P20240101
            - Path=/gateway/api/admin/**
          filters:
            - RewritePath=/gateway/api/admin/(?<segment>.*), /api/admin/$\{segment}
            - name: CustomFilter
              args: {}

        - id: employer-service
          # uri: lb://employer-service
          uri: http://localhost:8901
          predicates:
            - Header=apicode, atlas
            - Header=accesscode, P20240101
            - Path=/gateway/api/ess/**
          filters:
            - RewritePath=/gateway/api/ess/(?<segment>.*), /api/ess/$\{segment}

        - id: member-service
          # uri: lb://member-service
          uri: http://localhost:8902
          predicates:
            - Header=apicode, atlas
            - Header=accesscode, P20240101
            - Path=/gateway/api/member/**
          filters:
            - RewritePath=/gateway/api/member/(?<segment>.*), /api/member/$\{segment}

        - id: batch-service
          # uri: lb://batch-service
          uri: http://localhost:8903
          predicates:
            - Header=apicode, atlas
            - Header=accesscode, P20240101
            - Path=/gateway/api/batch/**
          filters:
            - RewritePath=/gateway/api/batch/(?<segment>.*), /api/batch/$\{segment}

        - id: document-service
          # uri: lb://document-service
          uri: http://localhost:8904
          predicates:
            - Header=apicode, atlas
            - Header=accesscode, P20240101
            - Path=/gateway/api/document/**
          filters:
            - RewritePath=/gateway/api/document/(?<segment>.*), /api/document/$\{segment}

    compatibility-verifier:
      enabled: false


i implemented azure ad setup in frontend angular and im passing bearer token form angular to springboot api. 
i want to validate that token in springboot. write springboot code.
write any helloworld api in spring boot with required pom.xml, config etc., showing how jwttoken validated for api call.
i have azure tenentid, clientid, clientsecret, issuerurl.
