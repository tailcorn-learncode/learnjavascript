import org.springframework.http.HttpStatus;
import org.springframework.web.server.ResponseStatusException;
import reactor.core.publisher.Mono;

@Override
public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
    String devmode = exchange.getRequest().getHeaders().getFirst("devmode");
    if ("dev".equals(devmode)) {
        return chain.filter(exchange); // Bypass token validation in dev mode
    }

    List<String> authHeaders = exchange.getRequest().getHeaders().getOrEmpty("Authorization");
    if (authHeaders.isEmpty() || !authHeaders.get(0).startsWith("Bearer ")) {
        // If Authorization header is missing or doesn't contain a bearer token, return Unauthorized response
        return Mono.error(new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Unauthorized - Missing or invalid Authorization header"));
    }

    try {
        String jwt = authHeaders.get(0).substring(7);
        Map<String, Object> claims = decodeJWT(jwt);
        Date expiration = new Date((Long) claims.get("exp") * 1000);
        if (expiration.before(new Date())) {
            return Mono.error(new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Unauthorized - Token expired"));
        }

        String email = (String) claims.get("unique_name");
        return webClient.get().uri("/api/admin/users/email/{email}", email)
                .retrieve()
                .bodyToMono(String.class)
                .flatMap(response -> chain.filter(exchange))
                .onErrorResume(WebClientResponseException.NotFound.class, e ->
                        Mono.error(new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Unauthorized - User not found")))
                .onErrorResume(e ->
                        Mono.error(new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Internal Server Error")));
    } catch (Exception e) {
        // Handle token decode failure or other errors gracefully
        return Mono.error(new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Unauthorized - Invalid token"));
    }
}
