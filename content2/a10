package gov.mipath.atlas.gateway.util;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;
import reactor.core.publisher.Mono;

import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.Map;

@Component
public class JwtAuthenticationFilter implements WebFilter {

    private WebClient webClient;
    private final String adminServiceBaseUrl = "http://localhost:8900";

    @Autowired
    public void TokenValidationFilter(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.baseUrl(adminServiceBaseUrl).build();
    }

    @Autowired
    private JwtUtil jwtUtil;

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
        String devmode = exchange.getRequest().getHeaders().getFirst("devmode");
        if ("dev".equals(devmode)) {
            return chain.filter(exchange); // Bypass token validation in dev mode
        }

        List<String> authHeaders = exchange.getRequest().getHeaders().getOrEmpty("Authorization");
        if (authHeaders.isEmpty() || !authHeaders.get(0).startsWith("Bearer ")) {
            // If Authorization header is missing or doesn't contain a bearer token, throw Unauthorized exception
            return Mono.error(new WebClientResponseException(HttpStatus.UNAUTHORIZED.value(), "Unauthorized", null, null, null));
        }

        String jwt = authHeaders.get(0).substring(7);
        try {
            Map<String, Object> claims = decodeJWT(jwt);
            Date expiration = new Date((Long) claims.get("exp") * 1000);
            if (expiration.before(new Date())) {
                return Mono.error(new WebClientResponseException(HttpStatus.UNAUTHORIZED.value(), "Unauthorized - Token expired", null, null, null));
            }

            String email = (String) claims.get("unique_name");
            return webClient.get().uri("/api/admin/users/email/{email}", email)
                    .retrieve()
                    .bodyToMono(String.class)
                    .flatMap(response -> chain.filter(exchange))
                    .onErrorResume(WebClientResponseException.NotFound.class, e ->
                            Mono.error(new WebClientResponseException(HttpStatus.UNAUTHORIZED.value(), "Unauthorized - User not found", null, null, null)))
                    .onErrorResume(e ->
                            Mono.error(new WebClientResponseException(HttpStatus.INTERNAL_SERVER_ERROR.value(), "Internal Server Error", null, null, null)));
        } catch (Exception e) {
            // Handle token decode failure or other errors
            return Mono.error(new WebClientResponseException(HttpStatus.UNAUTHORIZED.value(), "Unauthorized - Invalid token", null, null, null));
        }
    }

    private Map<String, Object> decodeJWT(String jwtToken) {
        // Your existing method
    }
}
