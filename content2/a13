package gov.mipath.atlas.gateway.util;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.server.ResponseStatusException;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;
import reactor.core.publisher.Mono;

import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.Map;

@Component
public class JwtAuthenticationFilter implements WebFilter {

    private static final Logger log = LoggerFactory.getLogger(JwtAuthenticationFilter.class);
    private final WebClient webClient;

    @Autowired
    public JwtAuthenticationFilter(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.baseUrl("http://localhost:8900").build();
    }

    // JwtUtil should be provided and autowired
    @Autowired
    private JwtUtil jwtUtil;

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
        String devmode = exchange.getRequest().getHeaders().getFirst("devmode");
        log.info("Devmode header value: {}", devmode);

        // Bypass authentication if in dev mode
        if ("dev".equals(devmode)) {
            return chain.filter(exchange);
        }

        List<String> authHeaders = exchange.getRequest().getHeaders().getOrEmpty("Authorization");
        if (authHeaders.isEmpty() || !authHeaders.get(0).startsWith("Bearer ")) {
            // Unauthorized due to missing or invalid Authorization header
            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
            return Mono.empty(); // Ensure the filter chain does not continue
        }

        // Extract the JWT token without the "Bearer " prefix
        String jwt = authHeaders.get(0).substring(7);
        try {
            Map<String, Object> claims = decodeJWT(jwt);
            Date expiration = new Date((Long) claims.get("exp") * 1000);
            if (expiration.before(new Date())) {
                exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
                return Mono.empty(); // Token expired
            }

            // Assuming the JWT is valid, proceed with the request
            return chain.filter(exchange);
        } catch (Exception e) {
            log.error("Error processing JWT token", e);
            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
            return Mono.empty(); // Invalid token
        }
    }

    private Map<String, Object> decodeJWT(String jwtToken) {
        // Decode JWT token logic...
    }
}
