import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import reactor.core.publisher.Mono;

@Component
public class TokenValidationFilter implements WebFilter {

    private final WebClient webClient;
    private final String adminServiceBaseUrl = "http://localhost:8900"; // Adjust as necessary

    @Autowired
    public TokenValidationFilter(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.baseUrl(adminServiceBaseUrl).build();
    }

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
        List<String> authHeaders = exchange.getRequest().getHeaders().getOrEmpty("Authorization");
        if (authHeaders.isEmpty()) {
            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
            return exchange.getResponse().setComplete();
        }

        String token = authHeaders.get(0).substring(7); // Remove "Bearer "
        String email = extractEmailFromToken(token); // Implement this method based on your JWT structure

        // Attempt to retrieve the user profile from the Admin service
        return webClient.get().uri("/api/admin/users/email/{email}", email)
                .retrieve()
                .bodyToMono(String.class) // Use String.class for generic handling; adjust as needed
                .flatMap(response -> {
                    // User found and presumably active, proceed with the filter chain
                    return chain.filter(exchange);
                })
                .onErrorResume(WebClientResponseException.NotFound.class, e -> {
                    // User not found, respond with UNAUTHORIZED
                    exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
                    return exchange.getResponse().setComplete();
                })
                .onErrorResume(e -> {
                    // For any other errors, respond with INTERNAL_SERVER_ERROR or a more appropriate status
                    exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
                    return exchange.getResponse().setComplete();
                });
    }

    private String extractEmailFromToken(String token) {
        // Placeholder implementation - extract and return the email from the JWT token
        // Adjust this implementation based on your token structure
        return ""; // Return the extracted email
    }
}




public Mono<UserProfileDto> getUserProfile(String email) {
    return this.webClient.get()
            .uri("/api/admin/users/email/{email}", email)
            .retrieve()
            .onStatus(HttpStatus::is4xxClientError, clientResponse -> {
                // Handle 4xx errors. You could throw a custom exception here.
                return Mono.error(new CustomClientException("User not found or other client error"));
            })
            .bodyToMono(UserProfileDto.class);
}



@GetMapping("/email/{email}")
public ResponseEntity<?> findByEmail(@PathVariable String email) {
    Optional<UserProfile> userProfileOptional = userProfileService.findByEmailAndIsActive(email);
    return userProfileOptional
            .map(userProfile -> ResponseEntity.ok().body(userProfile))
            .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found or not active"));
}



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

@RestController
@RequestMapping("/api/admin/users")
public class UserProfileController {

    private final UserProfileService userProfileService;

    @Autowired
    public UserProfileController(UserProfileService userProfileService) {
        this.userProfileService = userProfileService;
    }

    @GetMapping("/email/{email}")
    public ResponseEntity<?> findByEmail(@PathVariable String email) {
        return userProfileService.findByEmailAndIsActive(email)
                .map(userProfile -> ResponseEntity.ok(userProfile))
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found or not active"));
    }
}




public Map<String, Object> decodeJWT(String jwtToken) {
    String[] parts = jwtToken.split("\\.");
    if (parts.length < 2) {
        return Map.of(); // Return an empty map or handle error
    }

    String payload = parts[1];
    byte[] decodedBytes = Base64.getUrlDecoder().decode(payload);
    String decodedString = new String(decodedBytes);

    try {
        ObjectMapper objectMapper = new ObjectMapper();
        Map<String, Object> claims = objectMapper.readValue(decodedString, Map.class);

        // Convert exp claim safely to Long
        Object expObj = claims.get("exp");
        if (expObj != null) {
            Long exp;
            if (expObj instanceof Integer) {
                exp = ((Integer) expObj).longValue(); // Safe conversion from Integer to Long
            } else if (expObj instanceof Long) {
                exp = (Long) expObj;
            } else {
                throw new IllegalArgumentException("Invalid exp claim");
            }
            claims.put("exp", exp); // Put back the converted value
        }
        
        return claims;
    } catch (Exception e) {
        return Map.of(); // Return an empty map or handle error
    }
}





import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;
import reactor.core.publisher.Mono;

import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.Map;

@Component
public class TokenValidationFilter implements WebFilter {

    private final AdminServiceClient adminServiceClient;

    @Autowired
    public TokenValidationFilter(AdminServiceClient adminServiceClient) {
        this.adminServiceClient = adminServiceClient;
    }

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
        List<String> authHeaders = exchange.getRequest().getHeaders().getOrEmpty("Authorization");
        if (authHeaders.isEmpty()) {
            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
            return exchange.getResponse().setComplete();
        }

        String token = authHeaders.get(0).substring(7); // Remove "Bearer "
        try {
            Map<String, Object> claims = decodeJWT(token);

            Date expiration = new Date((Long)claims.get("exp") * 1000);
            if (expiration.before(new Date())) {
                exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
                return exchange.getResponse().setComplete(); // Token expired
            }

            String email = (String)claims.get("unique_name");
            
            // Proceed with checking user's active status
            return adminServiceClient.isUserActive(email)
                    .flatMap(isActive -> {
                        if (Boolean.TRUE.equals(isActive)) {
                            return chain.filter(exchange); // User is active; continue with request
                        } else {
                            exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);
                            return exchange.getResponse().setComplete(); // User is not active; block the request
                        }
                    }).switchIfEmpty(Mono.defer(() -> {
                        exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND);
                        return exchange.getResponse().setComplete(); // User not found; block the request
                    }));
        } catch (Exception e) {
            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
            return exchange.getResponse().setComplete();
        }
    }

    public Map<String, Object> decodeJWT(String jwtToken) {
        String[] parts = jwtToken.split("\\.");
        if (parts.length < 2) {
            return Map.of(); // Return an empty map or handle error
        }

        String payload = parts[1];
        byte[] decodedBytes = Base64.getUrlDecoder().decode(payload);
        String decodedString = new String(decodedBytes);

        try {
            ObjectMapper objectMapper = new ObjectMapper();
            return objectMapper.readValue(decodedString, Map.class);
        } catch (Exception e) {
            return Map.of(); // Return an empty map or handle error
        }
    }
}
