import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;
import reactor.core.publisher.Mono;

import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.Map;

@Component
public class TokenValidationFilter implements WebFilter {

    private final AdminServiceClient adminServiceClient;

    @Autowired
    public TokenValidationFilter(AdminServiceClient adminServiceClient) {
        this.adminServiceClient = adminServiceClient;
    }

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
        List<String> authHeaders = exchange.getRequest().getHeaders().getOrEmpty("Authorization");
        if (authHeaders.isEmpty()) {
            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
            return exchange.getResponse().setComplete();
        }

        String token = authHeaders.get(0).substring(7); // Remove "Bearer "
        try {
            Map<String, Object> claims = decodeJWT(token);

            Date expiration = new Date((Long)claims.get("exp") * 1000);
            if (expiration.before(new Date())) {
                exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
                return exchange.getResponse().setComplete(); // Token expired
            }

            String email = (String)claims.get("unique_name");
            
            // Proceed with checking user's active status
            return adminServiceClient.isUserActive(email)
                    .flatMap(isActive -> {
                        if (Boolean.TRUE.equals(isActive)) {
                            return chain.filter(exchange); // User is active; continue with request
                        } else {
                            exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);
                            return exchange.getResponse().setComplete(); // User is not active; block the request
                        }
                    }).switchIfEmpty(Mono.defer(() -> {
                        exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND);
                        return exchange.getResponse().setComplete(); // User not found; block the request
                    }));
        } catch (Exception e) {
            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
            return exchange.getResponse().setComplete();
        }
    }

    public Map<String, Object> decodeJWT(String jwtToken) {
        String[] parts = jwtToken.split("\\.");
        if (parts.length < 2) {
            return Map.of(); // Return an empty map or handle error
        }

        String payload = parts[1];
        byte[] decodedBytes = Base64.getUrlDecoder().decode(payload);
        String decodedString = new String(decodedBytes);

        try {
            ObjectMapper objectMapper = new ObjectMapper();
            return objectMapper.readValue(decodedString, Map.class);
        } catch (Exception e) {
            return Map.of(); // Return an empty map or handle error
        }
    }
}
