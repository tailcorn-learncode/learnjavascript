import { Injectable } from '@angular/core';
import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';
import { Observable } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { AuthService } from './auth.service';
import { environment } from '../environments/environment'; // Adjust the path as necessary

@Injectable()
export class AuthInterceptor implements HttpInterceptor {
    private loginUser = environment.currentuser;
    private tokenKey = environment.token;
    private apicode = environment.apicode;
    private accesscode = environment.accesscode;
    private devmode = environment.devmode;

    constructor(private authService: AuthService) {}

    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
        // Bypass for OAuth2 auth URLs
        if (request.url.includes('/oauth2/auth')) {
            return next.handle(request);
        }

        // If devmode is true, set headers without fetching an access token
        if (this.devmode === true) {
            const headers = {
                Apicode: this.apicode,
                Accesscode: this.accesscode,
                devmode: 'dev' // Assuming you want to explicitly set a devmode header
            };

            request = request.clone({
                setHeaders: headers
            });

            return next.handle(request);
        }

        // If devmode is false, proceed with fetching an access token
        return this.authService.fetchAccessToken().pipe(
            switchMap(token => {
                const headers = {
                    Apicode: this.apicode,
                    Accesscode: this.accesscode
                };

                // Add Authorization header if token exists
                if (token) {
                    headers['Authorization'] = `Bearer ${token}`;
                }

                request = request.clone({
                    setHeaders: headers
                });

                return next.handle(request);
            })
        );
    }
}





In below intecepter code get devmode key from environment, if it is true  dont do fetchAccessToken just pass apicode and accesscode. If devmode false, continue as given in code. ALso write code neatly if you feel so.


@Injectable()
export class AuthInterceptor implements HttpInterceptor {
    private loginUser = environment.currentuser;
    private tokenKey = environment.token;
    private apicode = environment.apicode;
    private accesscode = environment.accesscode;
    private devmode = environment.devmode;
    constructor(private authService: AuthService) {}

    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {        
        if (request.url.includes('/oauth2/auth')) {
            return next.handle(request);
        }

        return this.authService.fetchAccessToken().pipe(
            switchMap(token => {
                let headers = {
                    Apicode: this.apicode,
                    Accesscode: this.accesscode
                };

                if(token) headers['Authorization']=`Bearer ${token}`;  
                if(this.devmode) headers['devmode']='dev';      

                request = request.clone({
                    setHeaders: headers
                });
                           
                return next.handle(request);
            })
        );
    }
    }



@Override
public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
    // Retrieve the devmode and Authorization headers from the request
    String devmode = exchange.getRequest().getHeaders().getFirst("devmode");
    String authorizationHeader = exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION);

    // Check if devmode is not enabled (null) and Authorization header is either missing or does not start with "Bearer"
    if (devmode == null && (authorizationHeader == null || !authorizationHeader.startsWith("Bearer "))) {
        // If the conditions above are met, set the response status to UNAUTHORIZED and complete the request
        exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
        return exchange.getResponse().setComplete();
    }
    
    // Proceed with the existing logic if Authorization header is present and correctly formatted
    if (authorizationHeader != null && authorizationHeader.startsWith("Bearer ")) {
        String jwt = authorizationHeader.substring(7);
        Map<String, Object> claims = decodeJWT(jwt);
        Date expiration = new Date((Long) claims.get("exp") * 1000);
        if (expiration.before(new Date())) {
            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
            return exchange.getResponse().setComplete();
        }

        String email = (String) claims.get("unique_name");

        return webClient.get().uri("/api/admin/users/email/{email}", email)
                .retrieve()
                .bodyToMono(String.class)
                .flatMap(response -> chain.filter(exchange))
                .onErrorResume(WebClientResponseException.NotFound.class, e -> {
                    exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
                    return exchange.getResponse().setComplete();
                })
                .onErrorResume(e -> {
                    exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
                    return exchange.getResponse().setComplete();
                });
    }

    // If devmode is enabled, simply proceed with the filter chain without checking the Authorization header
    return chain.filter(exchange);
}



check this below code..

If from front end we pass Authorization with Bearertoken then no error or else return Unauthorized error.
Implement to send error if no Authothorization.
And then we we need to check devmode. In devmode (if devmode header is not null) there should be no error even if no Authorization.


@Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {

       
        String devmode = exchange.getRequest().getHeaders().getFirst("devmode");
        String authorizationHeader = exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION);

        if (authorizationHeader != null && authorizationHeader.startsWith("Bearer ")) {
            String jwt = authorizationHeader.substring(7);
            Map<String, Object> claims = decodeJWT(jwt);
            Date expiration = new Date((Long) claims.get("exp") * 1000);
            if (expiration.before(new Date())) {
                exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
                return exchange.getResponse().setComplete();
            }

            String email = (String) claims.get("unique_name");

            return webClient.get().uri("/api/admin/users/email/{email}", email)
                    .retrieve()
                    .bodyToMono(String.class)
                    .flatMap(response -> {
                        return chain.filter(exchange);
                    })
                    .onErrorResume(WebClientResponseException.NotFound.class, e -> {
                        exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
                        return exchange.getResponse().setComplete();
                    })
                    .onErrorResume(e -> {
                        exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
                        return exchange.getResponse().setComplete();
                    });

            // String username = jwtUtil.extractUsername(jwt);

            // if (username != null && jwtUtil.validateToken(jwt, username)) {
            // UsernamePasswordAuthenticationToken authentication = new
            // UsernamePasswordAuthenticationToken(username, null, null);
            // return
            // chain.filter(exchange).contextWrite(ReactiveSecurityContextHolder.withAuthentication(authentication));
            // }
        }
                
        return chain.filter(exchange);
    }
