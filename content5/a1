I'm doing POC in spring boot exceptions handling. I'm trying to best approach for exception handling.
Below are exception handler code written. I want to maintain constants file where I keep all errors. 
So, wherever there are errors maintain inconstants file. write all modified full code for all.

ApiErrorResponse..

package gov.mipath.atlas.arch.exception;

import lombok.Data;
import java.time.LocalDateTime;

@Data
public class ApiErrorResponse {
    private LocalDateTime timestamp;
    private int status;
    private String error;
    private String path;

    public ApiErrorResponse(LocalDateTime timestamp, int status, String error, String path) {
        this.timestamp = timestamp;
        this.status = status;
        this.error = error;
        this.path = path;
    }
}


CustomExceptions..

package gov.mipath.atlas.arch.exception;

public class CustomExceptions {

    public static class ResourceNotFoundException extends RuntimeException {
        public ResourceNotFoundException(String message) {
            super(message);
        }
    }

    public static class BadRequestException extends RuntimeException {
        public BadRequestException(String message) {
            super(message);
        }
    }

    public static class ConflictException extends RuntimeException {
        public ConflictException(String message) {
            super(message);
        }
    }
    

    public class ValidationException extends RuntimeException {
        public ValidationException(String message) {
            super(message);
        }
    }
}


GlobalExceptionHandler..

package gov.mipath.atlas.arch.exception;

import org.apache.coyote.BadRequestException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import gov.mipath.atlas.arch.exception.CustomExceptions.ConflictException;
import gov.mipath.atlas.arch.exception.CustomExceptions.ResourceNotFoundException;
import jakarta.servlet.http.HttpServletRequest;

import org.springframework.web.HttpMediaTypeNotAcceptableException;
import org.springframework.web.HttpMediaTypeNotSupportedException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MethodArgumentNotValidException;

import java.nio.file.AccessDeniedException;
import java.time.LocalDateTime;
import java.util.stream.Collectors;

@ControllerAdvice
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {

    private static final Logger log = LoggerFactory.getLogger(GlobalExceptionHandler.class);

    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<ApiErrorResponse> handleResourceNotFoundException(ResourceNotFoundException ex, HttpServletRequest request) {
        log.error("ResourceNotFoundException: {}", ex.getMessage());
        return buildResponseEntity(HttpStatus.NOT_FOUND, ex.getMessage(), request.getRequestURI());
    }  
    

    @ExceptionHandler(ConflictException.class)
    public ResponseEntity<ApiErrorResponse> handleConflictException(ConflictException ex, HttpServletRequest request) {
        log.error("ConflictException: {}", ex.getMessage());
        return buildResponseEntity(HttpStatus.CONFLICT, ex.getMessage(), request.getRequestURI());
    }

    @ExceptionHandler(AccessDeniedException.class)
    public ResponseEntity<ApiErrorResponse> handleAccessDeniedException(AccessDeniedException ex, HttpServletRequest request) {
        log.error("AccessDeniedException: {}", ex.getMessage());
        return buildResponseEntity(HttpStatus.UNAUTHORIZED, ex.getMessage(), request.getRequestURI());
    }   

    @ExceptionHandler({DataIntegrityViolationException.class})
    public ResponseEntity<ApiErrorResponse> handleDataIntegrityViolation(DataIntegrityViolationException ex, HttpServletRequest request) {
        log.error("DataIntegrityViolationException: {}", ex.getMessage());
        return buildResponseEntity(HttpStatus.CONFLICT, "Database error", request.getRequestURI());
    }

    @ExceptionHandler(MethodArgumentTypeMismatchException.class)
    public ResponseEntity<ApiErrorResponse> handleMethodArgumentTypeMismatch(MethodArgumentTypeMismatchException ex, WebRequest request) {
        String error = ex.getName() + " should be of type " + ex.getRequiredType().getName();
        return buildResponseEntity(HttpStatus.BAD_REQUEST, error, request.getContextPath());
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<ApiErrorResponse> handleGenericException(Exception ex, HttpServletRequest request) {
        log.error("GenericException: {}", ex.getMessage(),ex);
        return buildResponseEntity(HttpStatus.INTERNAL_SERVER_ERROR, "An unexpected error occurred", request.getRequestURI());
    }

    private ResponseEntity<ApiErrorResponse> buildResponseEntity(HttpStatus status, String message, String path) {
        ApiErrorResponse response = new ApiErrorResponse(LocalDateTime.now(), status.value(), message, path);
        return new ResponseEntity<>(response, status);
    }

   
}


UserprofileController..

package gov.mipath.atlas.admin.controller;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import gov.mipath.atlas.admin.common.dto.UserProfileDto;
import gov.mipath.atlas.admin.common.model.UserProfile;
import gov.mipath.atlas.admin.common.service.UserProfileService;
import gov.mipath.atlas.arch.exception.CustomExceptions.ResourceNotFoundException;
import lombok.extern.slf4j.Slf4j;

@RestController
@RequestMapping("/api/admin/users")
@Slf4j
public class UserProfileController {

    @Autowired
    private UserProfileService service;

    @GetMapping()
    public ResponseEntity<List<UserProfileDto>> findAll() {
        List<UserProfileDto> userProfiles = service.findAll().stream()
                .map(UserProfileDto::create)
                .collect(Collectors.toList());
        return ResponseEntity.ok(userProfiles);
    }

    @GetMapping("/email/{email}")
    public ResponseEntity<UserProfileDto> findByEmail(@PathVariable String email) {
        UserProfile userProfile = service.findByEmailAndIsActive(email)
                .orElseThrow(() -> new ResourceNotFoundException("User not found or not active"));
        return ResponseEntity.ok(UserProfileDto.create(userProfile));
    }

    @GetMapping("/{id}")
    public ResponseEntity<UserProfileDto> findById(@PathVariable Long id) {
        UserProfile userProfile = service.findById(id);
        if(userProfile == null) {
            throw new ResourceNotFoundException("User profile not found");
        }
        return ResponseEntity.ok(UserProfileDto.create(userProfile));
    }

    @PostMapping()
    public ResponseEntity<UserProfileDto> create(@RequestBody UserProfileDto model) {        
        UserProfile entity = service.addOrUpdate(model.parse());
        return new ResponseEntity<>(UserProfileDto.create(entity), HttpStatus.CREATED);
    }

    @PutMapping("/{id}")
    public ResponseEntity<UserProfileDto> update(@PathVariable Long id, @RequestBody UserProfileDto model) {
        if (!service.existsById(id)) {
            throw new ResourceNotFoundException("User profile not found");
        }
        model.setId(id); 
        UserProfile updatedEntity = service.addOrUpdate(model.parse());
        return ResponseEntity.ok(UserProfileDto.create(updatedEntity));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable Long id) {
        if (!service.existsById(id)) {
            throw new ResourceNotFoundException("User profile not found");
        }
        service.delete(id);
        return ResponseEntity.noContent().build();
    }
}

