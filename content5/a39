package com.example.gateway.controller;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import reactor.core.publisher.Mono;
import static org.junit.jupiter.api.Assertions.assertEquals;

@ExtendWith(MockitoExtension.class)
public class GatewayControllerTest {

    @InjectMocks
    private GatewayController controller;

    @BeforeEach
    void setup() {
        // Any setup code if needed
    }

    @Test
    void hello_returnsHelloWorld() {
        Mono<String> response = controller.hello();
        assertEquals("Hello World", response.block());
    }
}



package com.example.gateway.controller;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;

import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.is;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)
@ActiveProfiles("test")
public class GatewayControllerIT {

    private static WebClient webClient;
    private static String clientId = "your-client-id";
    private static String clientSecret = "your-client-secret";
    private static String tenantId = "your-tenant-id";

    @BeforeAll
    public static void setup() {
        RestAssured.baseURI = "http://localhost";
        RestAssured.port = 8080;
        webClient = WebClient.builder().baseUrl("https://login.microsoftonline.com/" + tenantId + "/oauth2/v2.0/token").build();
    }

    @AfterAll
    public static void cleanup() {
        // Cleanup code if needed
    }

    @BeforeEach
    void beforeEach() {
        // Any setup code before each test if needed
    }

    @Test
    void helloEndpoint_authenticated_returnsHelloWorld() {
        given()
            .auth()
            .oauth2(getAccessToken(clientId, clientSecret))
        .when()
            .get("/hello")
        .then()
            .statusCode(200)
            .body(is("Hello World"));
    }

    @Test
    void helloEndpoint_invalidClientCredentials_returnsForbidden() {
        given()
            .auth()
            .oauth2(getAccessToken("invalid-client-id", "invalid-client-secret"))
        .when()
            .get("/hello")
        .then()
            .statusCode(403);
    }

    @Test
    void helloEndpoint_missingClientCredentials_returnsForbidden() {
        given()
            .auth()
            .oauth2(getAccessToken("", ""))
        .when()
            .get("/hello")
        .then()
            .statusCode(403);
    }

    private String getAccessToken(String clientId, String clientSecret) {
        Map<String, String> formParams = new HashMap<>();
        formParams.put("client_id", clientId);
        formParams.put("client_secret", clientSecret);
        formParams.put("scope", "api://your-api-scope/.default");
        formParams.put("grant_type", "client_credentials");

        try {
            return webClient.post()
                .contentType(ContentType.URLENC)
                .bodyValue(formParams)
                .retrieve()
                .bodyToMono(Map.class)
                .map(response -> (String) response.get("access_token"))
                .block();
        } catch (WebClientResponseException e) {
            return "";
        }
    }
}
