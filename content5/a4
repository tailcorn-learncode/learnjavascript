@Override
public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
    // Initially attempt to get the client IP from the X-Forwarded-For header
    String ipAddress = exchange.getRequest().getHeaders().getFirst("X-Forwarded-For");
    if (ipAddress != null) {
        // If the header contains multiple IP addresses, take the first one
        ipAddress = ipAddress.split(",")[0];
    } else {
        // If the X-Forwarded-For header is not present, fall back to the remote address
        if (exchange.getRequest().getRemoteAddress() != null && exchange.getRequest().getRemoteAddress().getAddress() != null) {
            ipAddress = exchange.getRequest().getRemoteAddress().getAddress().getHostAddress();
        }
    }
    
    System.out.println("Client IP Address: " + ipAddress); // For demonstration; use a logger in production code

    // Existing code for JWT authentication...
    String authorizationHeader = exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION);

    // The rest of your filter method...
    return chain.filter(exchange); // Make sure to return this at the end of your method
}



String forwardedHeader = exchange.getRequest().getHeaders().getFirst("X-Forwarded-For");
if (forwardedHeader != null) {
    ipAddress = forwardedHeader.split(",")[0]; // Take the first IP if there are multiple
}



In this example springboot code below, i want to read ipaddress of angular application

package gov.mipath.atlas.gateway.util;

import java.util.Base64;
import java.util.Date;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Profile;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.ReactiveSecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;

import com.fasterxml.jackson.databind.ObjectMapper;

import reactor.core.publisher.Mono;

@Component
// @Profile("jwt")
public class JwtAuthenticationFilter implements WebFilter {

    private WebClient webClient;
    private final String adminServiceBaseUrl = "http://localhost:8900";

    @Autowired
    public void TokenValidationFilter(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.baseUrl(adminServiceBaseUrl).build();
    }

    @Autowired
    private JwtUtil jwtUtil;

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
        String authorizationHeader = exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION);

        if (authorizationHeader != null && authorizationHeader.startsWith("Bearer ")) {
            String jwt = authorizationHeader.substring(7);
            Map<String, Object> claims = decodeJWT(jwt);

            Date expiration = new Date((Long) claims.get("exp") * 1000);
            if (expiration.before(new Date())) {
                exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
                return exchange.getResponse().setComplete();
            }

            String userIdentifier = claims.containsKey("unique_name") ? (String) claims.get("unique_name") : null;
            if (userIdentifier == null || userIdentifier.isEmpty()) {
                userIdentifier = adjustEmailIfNeeded((String) claims.get("email"));
            }

            return attemptUserValidation(userIdentifier, exchange, chain);
        }
        return chain.filter(exchange);
    }

    private String adjustEmailIfNeeded(String email) {
        if (email != null && email.endsWith("@mi.com")) {
            return email.replace("@mi.com", "@mithin.com");
        }
        return email;
    }

    private Mono<Void> attemptUserValidation(String identifier, ServerWebExchange exchange, WebFilterChain chain) {
        return webClient.get().uri("/api/admin/users/email/{email}", identifier)
                .retrieve()
                .bodyToMono(String.class)
                .flatMap(response -> chain.filter(exchange))
                .onErrorResume(WebClientResponseException.NotFound.class, e -> {
                    exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
                    return exchange.getResponse().setComplete();
                })
                .onErrorResume(e -> {
                    exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
                    return exchange.getResponse().setComplete();
                });
    }

    public Map<String, Object> decodeJWT(String jwtToken) {
        String[] parts = jwtToken.split("\\.");
        if (parts.length < 2) {
            return Map.of();
        }

        String payload = parts[1];
        byte[] decodedBytes = Base64.getUrlDecoder().decode(payload);
        String decodedString = new String(decodedBytes);

        try {
            ObjectMapper objectMapper = new ObjectMapper();
            Map<String, Object> claims = objectMapper.readValue(decodedString, Map.class);

            Object expObj = claims.get("exp");
            if (expObj != null) {
                Long exp;
                if (expObj instanceof Integer) {
                    exp = ((Integer) expObj).longValue();
                } else if (expObj instanceof Long) {
                    exp = (Long) expObj;
                } else {
                    throw new IllegalArgumentException("Invalid exp claim");
                }
                claims.put("exp", exp);
            }

            return claims;
        } catch (Exception e) {
            return Map.of();
        }
    }

}
