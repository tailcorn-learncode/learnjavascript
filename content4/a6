I need to write neat global exceptional handling for my controller userprofile in spring boot. Given below are required 
exception classes. Now write code in userprofile to implement this global exceptions.

ApiErrorResponse..

package gov.mipath.atlas.admin.common.exception;

import lombok.Data;
import java.time.LocalDateTime;

@Data
public class ApiErrorResponse {
    private LocalDateTime timestamp;
    private int status;
    private String error;
    private String path;

    public ApiErrorResponse(LocalDateTime timestamp, int status, String error, String path) {
        this.timestamp = timestamp;
        this.status = status;
        this.error = error;
        this.path = path;
    }
}


CustomExceptions..

package gov.mipath.atlas.admin.common.exception;

public class CustomExceptions {

    public static class ResourceNotFoundException extends RuntimeException {
        public ResourceNotFoundException(String message) {
            super(message);
        }
    }

    public static class BadRequestException extends RuntimeException {
        public BadRequestException(String message) {
            super(message);
        }
    }

    public static class ConflictException extends RuntimeException {
        public ConflictException(String message) {
            super(message);
        }
    }
    

    public class ValidationException extends RuntimeException {
        public ValidationException(String message) {
            super(message);
        }
    }
}


GlobalExceptionHandler..

package gov.mipath.atlas.admin.common.exception;

import org.apache.coyote.BadRequestException;
import org.apache.kafka.common.errors.ResourceNotFoundException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import gov.mipath.atlas.admin.common.exception.CustomExceptions.ConflictException;
import jakarta.servlet.http.HttpServletRequest;

import org.springframework.web.HttpMediaTypeNotAcceptableException;
import org.springframework.web.HttpMediaTypeNotSupportedException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MethodArgumentNotValidException;

import java.nio.file.AccessDeniedException;
import java.time.LocalDateTime;

@ControllerAdvice
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {

    private static final Logger log = LoggerFactory.getLogger(GlobalExceptionHandler.class);

    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<ApiErrorResponse> handleResourceNotFoundException(ResourceNotFoundException ex, HttpServletRequest request) {
        log.error("ResourceNotFoundException: {}", ex.getMessage());
        System.out.println("unexpected"+ex.getMessage());
        return buildResponseEntity(HttpStatus.NOT_FOUND, ex.getMessage(), request.getRequestURI());
    }  
    

    @ExceptionHandler(ConflictException.class)
    public ResponseEntity<ApiErrorResponse> handleConflictException(ConflictException ex, HttpServletRequest request) {
        log.error("ConflictException: {}", ex.getMessage());
        return buildResponseEntity(HttpStatus.CONFLICT, ex.getMessage(), request.getRequestURI());
    }

    @ExceptionHandler(AccessDeniedException.class)
    public ResponseEntity<ApiErrorResponse> handleAccessDeniedException(AccessDeniedException ex, HttpServletRequest request) {
        log.error("AccessDeniedException: {}", ex.getMessage());
        return buildResponseEntity(HttpStatus.UNAUTHORIZED, ex.getMessage(), request.getRequestURI());
    }   

    @ExceptionHandler({DataIntegrityViolationException.class})
    public ResponseEntity<ApiErrorResponse> handleDataIntegrityViolation(DataIntegrityViolationException ex, HttpServletRequest request) {
        log.error("DataIntegrityViolationException: {}", ex.getMessage());
        return buildResponseEntity(HttpStatus.CONFLICT, "Database error", request.getRequestURI());
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<ApiErrorResponse> handleGenericException(Exception ex, HttpServletRequest request) {
        log.error("GenericException: {}", ex.getMessage(),ex);
        return buildResponseEntity(HttpStatus.INTERNAL_SERVER_ERROR, "An unexpected error occurred", request.getRequestURI());
    }

    private ResponseEntity<ApiErrorResponse> buildResponseEntity(HttpStatus status, String message, String path) {
        System.out.println("here");
        System.out.println("here2"+message);
        ApiErrorResponse response = new ApiErrorResponse(LocalDateTime.now(), status.value(), message, path);
        return new ResponseEntity<>(response, status);
    }

   
}





Userprofilecontroller..

package gov.mipath.atlas.admin.controller;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import gov.mipath.atlas.admin.common.dto.UserProfileDto;
import gov.mipath.atlas.admin.common.model.UserProfile;
import gov.mipath.atlas.admin.common.service.UserProfileService;
import lombok.extern.slf4j.Slf4j;

@RestController
@RequestMapping("/api/admin/users")
@Slf4j
public class UserProfileController {

    @Autowired
    private UserProfileService service;

    @GetMapping()
    public ResponseEntity<List<UserProfileDto>> findAll() {
        try {
			return new ResponseEntity<List<UserProfileDto>>(
                        service.findAll().stream().map(t -> UserProfileDto.create(t)).collect(Collectors.toList()), 
                        HttpStatus.OK
            );

		} catch (NoSuchElementException e) {
			log.error("Unable to find " + e.getMessage());
			return new ResponseEntity<List<UserProfileDto>>(HttpStatus.NOT_FOUND);
		}
    }

    @GetMapping("/email/{email}")
public ResponseEntity<?> findByEmail(@PathVariable String email) {
    Optional<UserProfile> userProfileOptional = service.findByEmailAndIsActive(email);    
    return userProfileOptional
            .map(userProfile -> ResponseEntity.ok().body(userProfile))
            .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found or not active"));
}

    @GetMapping(value="/{id}")
    public ResponseEntity<UserProfileDto> findById(@PathVariable Long id) {
        try {
			var entity = service.findById(id);
            if(entity == null) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "user profile not found");
            }
			return new ResponseEntity<UserProfileDto>(
                        UserProfileDto.create(entity), 
                        HttpStatus.OK
            );

		} catch (NoSuchElementException e ) {
			return new ResponseEntity<UserProfileDto>(HttpStatus.NOT_FOUND);
		}
    }

    @PostMapping()
    public ResponseEntity<UserProfileDto> create(@RequestBody UserProfileDto model) {
        try {
			var entity = service.addOrUpdate(model.parse());
			return new ResponseEntity<UserProfileDto>(
						UserProfileDto.create(entity), 
						HttpStatus.OK
			);

		} catch (Exception e) {
			log.error("Unable to save " + e.getMessage()); 
			return new ResponseEntity<UserProfileDto>(HttpStatus.BAD_REQUEST); 
		}

    }

    @PutMapping(value="/{id}")
    public ResponseEntity<UserProfileDto> update(@PathVariable Long id, @RequestBody UserProfileDto model) {
        try {
            var entity = service.findById(id);
            if(entity == null) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "user profile not found");
            }
            model.setId(id);
            var result = service.addOrUpdate(model.parse());
            return new ResponseEntity<UserProfileDto>(
                        UserProfileDto.create(result), 
                        HttpStatus.OK
            );
			
		} catch (NoSuchElementException e) {
			log.error("Unable to update " + e.getMessage());
			return new ResponseEntity<UserProfileDto>(HttpStatus.NOT_FOUND);
		}
    }

    @DeleteMapping(value="/{id}")
    public ResponseEntity<UserProfileDto> delete(@PathVariable Long id) {
        try {
			service.delete(id);
			return ResponseEntity.noContent().build();

		} catch (EmptyResultDataAccessException e) {
			log.error("Unable to delete " + e.getMessage());
			return ResponseEntity.noContent().build();
		}      
    }
}




package gov.mipath.atlas.admin.common.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import gov.mipath.atlas.admin.common.model.UserProfile;
import gov.mipath.atlas.admin.common.repository.UserProfileRepository;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

@Service
public class UserProfileService {
    
    @Autowired
    private UserProfileRepository repository;
   
    public List<UserProfile> findAll() {
        return repository.findAll();
    }

    public UserProfile findById(long id) {
        return repository.findById(id).orElse(null);
    }

    public UserProfile addOrUpdate(UserProfile entity) {
        return repository.save(entity);
    }

    public void delete(long id) {
        repository.deleteById(id);
    }

    public Optional<UserProfile> findByEmailAndIsActive(String email) {
    return repository.findByEmailAddressAndActiveIndicator(email, true);
}
}


