<!-- ... Other parts of the template remain unchanged ... -->

<!-- If actions are to be shown, add Edit and Delete icons -->
<ng-container *ngIf="showActions" matColumnDef="actions">
    <mat-header-cell *matHeaderCellDef> Actions </mat-header-cell>
    <mat-cell *matCellDef="let element">
      <mat-icon (click)="onEdit(element)" style="cursor: pointer;">edit</mat-icon>
      <mat-icon (click)="onDelete(element)" style="cursor: pointer; color: red;">delete</mat-icon>
    </mat-cell>
</ng-container>

<!-- ... Rest of the template ... -->


/* Basic table styling */
mat-table {
  width: 100%;
  border-collapse: collapse;
  margin: 20px 0;
  font-size: 16px;
  text-align: left;
}

/* Header cell styling */
mat-header-cell {
  background-color: #f2f2f2;
  padding: 10px 15px;
  border-bottom: 1px solid #e0e0e0;
  font-weight: bold;
}

/* Data cell styling */
mat-cell {
  padding: 10px 15px;
  border-bottom: 1px solid #e0e0e0;
}

/* Icon styling inside cells */
mat-icon {
  margin-right: 10px;
}

/* Action buttons styling */
button {
  margin: 0 5px;
  background-color: #4CAF50;  /* Green background */
  border: none;
  color: white;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 14px;
  transition-duration: 0.4s;  /* Transition effect */
  cursor: pointer;
  border-radius: 4px;
}

/* Add a hover effect for buttons */
button:hover {
  background-color: #45a049;  /* Darker green */
  color: white;
}



import { Component, Input, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-custom-datatable',
  templateUrl: './custom-datatable.component.html',
  styleUrls: ['./custom-datatable.component.css']
})
export class CustomDatatableComponent {

  @Input() columns: string[] = [];
  @Input() data: any[] = [];
  @Input() showActions: boolean = false;

  @Output() edit: EventEmitter<any> = new EventEmitter();
  @Output() delete: EventEmitter<any> = new EventEmitter();

  isIconObject(value: any): boolean {
    return typeof value === 'object' && value?.icon;
  }

  onEdit(item: any): void {
    this.edit.emit(item);
  }

  onDelete(item: any): void {
    this.delete.emit(item);
  }

}



<mat-table [dataSource]="data">

  <!-- Define the columns and the data for each column -->
  <ng-container *ngFor="let col of columns" [matColumnDef]="col">
    <mat-header-cell *matHeaderCellDef> {{ col }} </mat-header-cell>
    <mat-cell *matCellDef="let element">

      <!-- If the data is an object with an icon, display icon and text -->
      <ng-container *ngIf="isIconObject(element[col])">
        <mat-icon>{{ element[col].icon }}</mat-icon>
        {{ element[col].text }}
      </ng-container>

      <!-- If not an object, just display the data -->
      <ng-container *ngIf="!isIconObject(element[col])">
        {{ element[col] }}
      </ng-container>

    </mat-cell>
  </ng-container>

  <!-- If actions are to be shown, add Edit and Delete buttons -->
  <ng-container *ngIf="showActions" matColumnDef="actions">
    <mat-header-cell *matHeaderCellDef> Actions </mat-header-cell>
    <mat-cell *matCellDef="let element">
      <button mat-button (click)="onEdit(element)">Edit</button>
      <button mat-button (click)="onDelete(element)">Delete</button>
    </mat-cell>
  </ng-container>

  <!-- Add the columns to the row definitions -->
  <mat-header-row *matHeaderRowDef="columns.concat(showActions ? ['actions'] : [])"></mat-header-row>
  <mat-row *matRowDef="let row; columns: columns.concat(showActions ? ['actions'] : [])"></mat-row>

</mat-table>






ng generate component custom-datatable


import { Component, Input, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-custom-datatable',
  templateUrl: './custom-datatable.component.html',
  styleUrls: ['./custom-datatable.component.css']
})
export class CustomDatatableComponent {

  @Input() columns: string[];
  @Input() data: any[];
  @Input() showActions: boolean;
  @Output() edit: EventEmitter<any> = new EventEmitter();
  @Output() delete: EventEmitter<any> = new EventEmitter();

  onEdit(item: any): void {
    this.edit.emit(item);
  }

  onDelete(item: any): void {
    this.delete.emit(item);
  }

}


<table mat-table [dataSource]="data">

  <!-- Define columns -->
  <ng-container *ngFor="let col of columns" [matColumnDef]="col">
    <th mat-header-cell *matHeaderCellDef> {{ col }} </th>
    <td mat-cell *matCellDef="let element">
      <ng-container *ngIf="typeof element[col] === 'object' && element[col]?.icon">
        <mat-icon>{{ element[col].icon }}</mat-icon> {{ element[col].text }}
      </ng-container>
      <ng-container *ngIf="typeof element[col] !== 'object'">
        {{ element[col] }}
      </ng-container>
    </td>
  </ng-container>

  <!-- Actions Column -->
  <ng-container matColumnDef="actions" *ngIf="showActions">
    <th mat-header-cell *matHeaderCellDef> Actions </th>
    <td mat-cell *matCellDef="let element">
      <button mat-icon-button (click)="onEdit(element)">
        <mat-icon>edit</mat-icon>
      </button>
      <button mat-icon-button (click)="onDelete(element)">
        <mat-icon>delete</mat-icon>
      </button>
    </td>
  </ng-container>

  <!-- Apply column definitions to rows -->
  <tr mat-header-row *matHeaderRowDef="columns.concat(showActions ? ['actions'] : [])"></tr>
  <tr mat-row *matRowDef="let row; columns: columns.concat(showActions ? ['actions'] : []);"></tr>

</table>



table {
    width: 100%;
    border-collapse: collapse;
}

th, td {
    padding: 12px 24px;
    border-bottom: 1px solid #e0e0e0;
    font-family: 'Roboto', sans-serif;
    font-size: 14px;
}

th {
    background-color: #f5f5f5;
    color: #757575;
}

td {
    color: #424242;
}

mat-icon {
    margin-right: 8px;
    vertical-align: middle;
    font-size: 18px;
}

button[mat-icon-button] {
    margin-right: 8px;
    color: #757575;
}

/* Remove action button margin for the last button */
td > button[mat-icon-button]:last-child {
    margin-right: 0;
}

/* Profile Column specific styling */
td:first-child {
    display: flex;
    align-items: center;
}

td:first-child div {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 40px;
    height: 40px;
    background-color: #9e9e9e; /* You can adjust this color */
    color: white;
    border-radius: 50%;
    margin-right: 16px;
}

/* Adjust table layout for smaller screens if needed */
@media only screen and (max-width: 600px) {
    th, td {
        padding: 8px 12px;
    }
}







<app-custom-datatable
  [columns]="['Profile column', 'Text column', 'Icon+text column']"
  [data]="yourDataArray"
  [showActions]="true"
  (edit)="onEdit($event)"
  (delete)="onDelete($event)">
</app-custom-datatable>


[
  { 
    'Profile column': { icon: 'person', text: 'Warren Lansing' },
    'Text column': 'Abc123',
    'Icon+text column': { icon: 'settings', text: 'Icon + text' }
  },
  // ... other rows
]





import { Component } from '@angular/core';

@Component({
  selector: 'app-user-list',
  templateUrl: './user-list.component.html',
  styleUrls: ['./user-list.component.css']
})
export class UserListComponent {

  columns = ['Profile column', 'Text column', 'Icon+text column'];
  yourDataArray = [
    { 
      'Profile column': { icon: 'person', text: 'Warren Lansing' },
      'Text column': 'Abc123',
      'Icon+text column': { icon: 'settings', text: 'Icon + text' }
    },
    // ... add more rows as needed
  ];

  onEdit(item: any): void {
    console.log('Edit action for:', item);
    // Add your logic for the edit action here
  }

  onDelete(item: any): void {
    console.log('Delete action for:', item);
    // Add your logic for the delete action here
  }

}








<mat-table [dataSource]="data">

  <!-- Columns setup -->
  <ng-container *ngFor="let column of columns" [matColumnDef]="column.id">
    <mat-header-cell *matHeaderCellDef> {{column.header}} </mat-header-cell>
    <mat-cell *matCellDef="let row">
      <span *ngIf="column.type === 'icon-text' || column.type === 'text'">{{ row[column.field] }}</span>
      <img *ngIf="column.type === 'icon-text' || column.type === 'icon'" [src]="row[column.iconField]" alt="icon">
    </mat-cell>
  </ng-container>

  <!-- Action Column -->
  <ng-container matColumnDef="actions" *ngIf="showActions">
    <mat-header-cell *matHeaderCellDef> Actions </mat-header-cell>
    <mat-cell *matCellDef="let row">
      <button mat-button (click)="onEdit(row)">Edit</button>
      <button mat-button (click)="onDelete(row)">Delete</button>
    </mat-cell>
  </ng-container>

  <mat-header-row *matHeaderRowDef="displayedColumns"></mat-header-row>
  <mat-row *matRowDef="let row; columns: displayedColumns;"></mat-row>
</mat-table>



import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';

@Component({
  selector: 'app-custom-data-table',
  templateUrl: './custom-data-table.component.html',
  styleUrls: ['./custom-data-table.component.css']
})
export class CustomDataTableComponent implements OnInit {

  @Input() columns: any[] = [];
  @Input() data: any[] = [];
  @Input() showActions = false;
  
  @Output() edit: EventEmitter<any> = new EventEmitter();
  @Output() delete: EventEmitter<any> = new EventEmitter();

  displayedColumns: string[];

  ngOnInit() {
    this.displayedColumns = this.columns.map(column => column.id);
    if (this.showActions) {
      this.displayedColumns.push('actions');
    }
  }

  onEdit(item: any) {
    this.edit.emit(item);
  }

  onDelete(item: any) {
    this.delete.emit(item);
  }
}



<app-custom-data-table 
  [columns]="yourColumns"
  [data]="yourData"
  [showActions]="true"
  (edit)="yourEditMethod($event)"
  (delete)="yourDeleteMethod($event)">
</app-custom-data-table>





<button mat-button [ngClass]="buttonType" (click)="handleClick()">
  <ng-content></ng-content>
</button>


/* Base style */
button {
    border-radius: 20px;
    padding: 8px 16px;
    font-size: 14px;
}

/* Style based on @Input() */
button.primary {
    background-color: #2196F3; /* Example primary color */
    color: white;
}

button.secondary {
    background-color: #9E9E9E; /* Example secondary color */
    color: white;
}

button.tertiary {
    background-color: #E0E0E0; /* Example tertiary color */
    color: black;
}

/* ... You can add other styles for other types as needed ... */


import { Component, Input, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-custom-button',
  templateUrl: './custom-button.component.html',
  styleUrls: ['./custom-button.component.css']
})
export class CustomButtonComponent {
  
  @Input() buttonType: 'primary' | 'secondary' | 'tertiary' = 'primary';
  @Output() buttonClick = new EventEmitter<void>();

  handleClick() {
    this.buttonClick.emit();
  }

}



<app-custom-button buttonType="primary" (buttonClick)="onButtonClick()">
  + Label
</app-custom-button>






files: { data: File, progress?: number }[] = [];

onFileSelected(event: any) {
  const selectedFiles = <FileList>event.target.files;
  for (let i = 0; i < selectedFiles.length; i++) {
    const file = selectedFiles[i];
    this.files.push({ data: file, progress: 0 });
    // Handle uploading the file and updating its progress if required.
  }
}


<div class="file-list" *ngIf="files.length">
  <div *ngFor="let fileItem of files" class="file-item">
    <mat-icon>description</mat-icon> <!-- File Icon -->
    <span>{{ fileItem.data.name }}</span>
    <mat-progress-bar mode="determinate" [value]="fileItem.progress"></mat-progress-bar>
    <mat-icon (click)="removeFile(fileItem)">delete</mat-icon> <!-- Delete Icon -->
  </div>
</div>



removeFile(fileToRemove: { data: File, progress?: number }) {
  const index = this.files.findIndex(file => file.data === fileToRemove.data);
  if (index > -1) {
    this.files.splice(index, 1);
  }
}





<input type="file" #fileInput (change)="onFileSelected($event)" hidden multiple>

onFileSelected(event: any) {
  const selectedFiles = <FileList>event.target.files;
  for (let i = 0; i < selectedFiles.length; i++) {
    const file = selectedFiles[i];
    this.files.push({ name: file.name, progress: 0 }); // For now, just storing the name and progress. You can extend this to include the file object if needed.
    // If you're using some method to upload the files, you can do so here.
  }
}



<div class="file-list" *ngIf="files.length">
  <div *ngFor="let file of files" class="file-item">
    <mat-icon>description</mat-icon> <!-- File Icon -->
    <span>{{ file.name }}</span>
    <mat-progress-bar mode="determinate" [value]="file.progress"></mat-progress-bar>
    <mat-icon (click)="removeFile(file)">delete</mat-icon> <!-- Delete Icon -->
  </div>
</div>


removeFile(fileToRemove: any) {
  const index = this.files.indexOf(fileToRemove);
  if (index > -1) {
    this.files.splice(index, 1);
  }
}


.file-list {
  .file-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 10px;

    mat-icon {
      margin-right: 10px;
    }

    span {
      flex-grow: 1;
    }

    mat-progress-bar {
      width: 100%;
      margin: 5px 0;
    }
  }
}







file upload

<mat-dialog-content>
  <h2>Upload file</h2>
  <p>Max file size is 500kb. Supported file types are .jpg, .png, and .pdf.</p>

  <div class="upload-zone">
    <div>
      Drag and drop your file
    </div>
    <span>or</span>
   <button mat-raised-button color="primary" (click)="triggerFileInput()">
  Browse for file
</button>
<input type="file" #fileInput (change)="onFileSelected($event)" hidden>

  </div>

  <div class="file-list" *ngIf="files.length">
    <div *ngFor="let file of files" class="file-item">
      <mat-icon>description</mat-icon>
      <span>{{ file.name }}</span>
       <mat-progress-bar mode="determinate" [value]="file.progress"></mat-progress-bar>
    </div>
  </div>

</mat-dialog-content>

<mat-dialog-actions>
  <button mat-button (click)="onCancel()">Cancel</button>
  <button mat-raised-button color="primary" (click)="onUpload()">Upload</button>
</mat-dialog-actions>


import { Component, ViewChild, ElementRef } from '@angular/core';

@Component({
  selector: 'app-my-upload',
  templateUrl: './my-upload.component.html',
  styleUrls: ['./my-upload.component.scss']
})
export class MyUploadComponent {
  files: File[] = [];

  @ViewChild('fileInput') fileInput: ElementRef;

triggerFileInput() {
  this.fileInput.nativeElement.click();
}

  onFileSelected(event: Event) {
    const input = event.target as HTMLInputElement;
    if (input.files) {
      this.files.push(...Array.from(input.files));
    }
  }

  onCancel() {
    // Handle cancel logic here
  }

 onUpload() {
    // Mock uploading progress for each file
    this.files.forEach((file: any) => {
      file.progress = 0;
      const interval = setInterval(() => {
        if (file.progress < 100) {
          file.progress += 10;
        } else {
          clearInterval(interval);
        }
      }, 500);
    });
  }
}



.upload-zone {
  border: dashed 2px gray;
  padding: 20px;
  text-align: center;
  margin-bottom: 20px;

  input[type="file"] {
    display: none;
  }
}

.file-list {
  .file-item {
    display: flex;
    flex-direction: column;
    align-items: start;
    margin-bottom: 10px;

    mat-icon {
      margin-bottom: 5px;
    }

    mat-progress-bar {
      width: 100%;
      margin-top: 5px;
    }
  }
}

