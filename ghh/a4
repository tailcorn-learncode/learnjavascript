<button mat-button [ngClass]="buttonType" (click)="handleClick()">
  <ng-content></ng-content>
</button>


/* Base style */
button {
    border-radius: 20px;
    padding: 8px 16px;
    font-size: 14px;
}

/* Style based on @Input() */
button.primary {
    background-color: #2196F3; /* Example primary color */
    color: white;
}

button.secondary {
    background-color: #9E9E9E; /* Example secondary color */
    color: white;
}

button.tertiary {
    background-color: #E0E0E0; /* Example tertiary color */
    color: black;
}

/* ... You can add other styles for other types as needed ... */


import { Component, Input, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-custom-button',
  templateUrl: './custom-button.component.html',
  styleUrls: ['./custom-button.component.css']
})
export class CustomButtonComponent {
  
  @Input() buttonType: 'primary' | 'secondary' | 'tertiary' = 'primary';
  @Output() buttonClick = new EventEmitter<void>();

  handleClick() {
    this.buttonClick.emit();
  }

}



<app-custom-button buttonType="primary" (buttonClick)="onButtonClick()">
  + Label
</app-custom-button>






files: { data: File, progress?: number }[] = [];

onFileSelected(event: any) {
  const selectedFiles = <FileList>event.target.files;
  for (let i = 0; i < selectedFiles.length; i++) {
    const file = selectedFiles[i];
    this.files.push({ data: file, progress: 0 });
    // Handle uploading the file and updating its progress if required.
  }
}


<div class="file-list" *ngIf="files.length">
  <div *ngFor="let fileItem of files" class="file-item">
    <mat-icon>description</mat-icon> <!-- File Icon -->
    <span>{{ fileItem.data.name }}</span>
    <mat-progress-bar mode="determinate" [value]="fileItem.progress"></mat-progress-bar>
    <mat-icon (click)="removeFile(fileItem)">delete</mat-icon> <!-- Delete Icon -->
  </div>
</div>



removeFile(fileToRemove: { data: File, progress?: number }) {
  const index = this.files.findIndex(file => file.data === fileToRemove.data);
  if (index > -1) {
    this.files.splice(index, 1);
  }
}





<input type="file" #fileInput (change)="onFileSelected($event)" hidden multiple>

onFileSelected(event: any) {
  const selectedFiles = <FileList>event.target.files;
  for (let i = 0; i < selectedFiles.length; i++) {
    const file = selectedFiles[i];
    this.files.push({ name: file.name, progress: 0 }); // For now, just storing the name and progress. You can extend this to include the file object if needed.
    // If you're using some method to upload the files, you can do so here.
  }
}



<div class="file-list" *ngIf="files.length">
  <div *ngFor="let file of files" class="file-item">
    <mat-icon>description</mat-icon> <!-- File Icon -->
    <span>{{ file.name }}</span>
    <mat-progress-bar mode="determinate" [value]="file.progress"></mat-progress-bar>
    <mat-icon (click)="removeFile(file)">delete</mat-icon> <!-- Delete Icon -->
  </div>
</div>


removeFile(fileToRemove: any) {
  const index = this.files.indexOf(fileToRemove);
  if (index > -1) {
    this.files.splice(index, 1);
  }
}


.file-list {
  .file-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 10px;

    mat-icon {
      margin-right: 10px;
    }

    span {
      flex-grow: 1;
    }

    mat-progress-bar {
      width: 100%;
      margin: 5px 0;
    }
  }
}







file upload

<mat-dialog-content>
  <h2>Upload file</h2>
  <p>Max file size is 500kb. Supported file types are .jpg, .png, and .pdf.</p>

  <div class="upload-zone">
    <div>
      Drag and drop your file
    </div>
    <span>or</span>
   <button mat-raised-button color="primary" (click)="triggerFileInput()">
  Browse for file
</button>
<input type="file" #fileInput (change)="onFileSelected($event)" hidden>

  </div>

  <div class="file-list" *ngIf="files.length">
    <div *ngFor="let file of files" class="file-item">
      <mat-icon>description</mat-icon>
      <span>{{ file.name }}</span>
       <mat-progress-bar mode="determinate" [value]="file.progress"></mat-progress-bar>
    </div>
  </div>

</mat-dialog-content>

<mat-dialog-actions>
  <button mat-button (click)="onCancel()">Cancel</button>
  <button mat-raised-button color="primary" (click)="onUpload()">Upload</button>
</mat-dialog-actions>


import { Component, ViewChild, ElementRef } from '@angular/core';

@Component({
  selector: 'app-my-upload',
  templateUrl: './my-upload.component.html',
  styleUrls: ['./my-upload.component.scss']
})
export class MyUploadComponent {
  files: File[] = [];

  @ViewChild('fileInput') fileInput: ElementRef;

triggerFileInput() {
  this.fileInput.nativeElement.click();
}

  onFileSelected(event: Event) {
    const input = event.target as HTMLInputElement;
    if (input.files) {
      this.files.push(...Array.from(input.files));
    }
  }

  onCancel() {
    // Handle cancel logic here
  }

 onUpload() {
    // Mock uploading progress for each file
    this.files.forEach((file: any) => {
      file.progress = 0;
      const interval = setInterval(() => {
        if (file.progress < 100) {
          file.progress += 10;
        } else {
          clearInterval(interval);
        }
      }, 500);
    });
  }
}



.upload-zone {
  border: dashed 2px gray;
  padding: 20px;
  text-align: center;
  margin-bottom: 20px;

  input[type="file"] {
    display: none;
  }
}

.file-list {
  .file-item {
    display: flex;
    flex-direction: column;
    align-items: start;
    margin-bottom: 10px;

    mat-icon {
      margin-bottom: 5px;
    }

    mat-progress-bar {
      width: 100%;
      margin-top: 5px;
    }
  }
}

