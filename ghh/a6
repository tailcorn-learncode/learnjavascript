/* Override the appearance of the increment and decrement buttons */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
    background-color: green; /* Color the background of arrows */
}

/* Add a custom appearance */
input[type="number"] {
    -moz-appearance: textfield; /* Removes the default appearance for Firefox */
    appearance: textfield;
    &::-webkit-inner-spin-button,
    &::-webkit-outer-spin-button {
        appearance: button;
        display: block; /* Makes it always visible */
        width: 15px;
        background-color: green; /* Color the background of arrows */
    }
}



<div class="bg-gray-300 flex items-center rounded-r-lg justify-center">
    <div class="flex relative w-16">
        <input x-model="split.split" :disabled="!isEditable()" @change="splitcalc(split.text)" min="0" :max="split.max" type="number" name="" placeholder="0" value="" class="bg-gray-300 block border border-gray-300 caret-indigo-600 font-black h-[55px] flex-1 focus:border-indigo-600 focus:ring-indigo-600 min-w-0 placeholder-gray-500 rounded-md text-2xl pl-2 pr-10">
        <div class="absolute inset-y-0 right-0 flex items-center pointer-events-none text-lg text-gray-900">
            <span class="transform rotate-180">â–¼</span>
        </div>
    </div>
</div>

<div class="bg-gray-300 flex items-center rounded-r-lg justify-center">
    <div class="flex relative w-16">
        <input x-model="split.split" :disabled="!isEditable()" @change="splitcalc(split.text)" min="0" :max="split.max" type="number" name="" placeholder="0" value="" class="bg-gray-300 block border border-gray-300 caret-indigo-600 font-black h-[55px] flex-1 focus:border-indigo-600 focus:ring-indigo-600 min-w-0 placeholder-gray-500 rounded-md text-2xl pl-2">
        <div class="absolute flex inset-y-0 items-center pointer-events-none right-2 top-1/2 transform -translate-y-1/2 text-lg text-gray-900">
            %
        </div>
    </div>
</div>



<div class="bg-gray-300 flex items-center rounded-r-lg justify-center">
    <div class="flex relative w-16">
        <div class="absolute flex inset-y-0 items-center pointer-events-none left-2 top-1/2 transform -translate-y-1/2 text-lg text-gray-900">
            %
        </div>
        <input x-model="split.split" :disabled="!isEditable()" @change="splitcalc(split.text)" min="0" :max="split.max" type="number" name="" placeholder="0" value="" class="bg-gray-300 block border border-gray-300 caret-indigo-600 font-black h-[55px] flex-1 focus:border-indigo-600 focus:ring-indigo-600 min-w-0 placeholder-gray-500 rounded-md text-2xl pl-10">
    </div>
</div>


<div class="bg-gray-300 flex items-center rounded-r-lg justify-center">
                                            <div class="flex relative w-16">
                                               
                                                <input x-model="split.split" :disabled="!isEditable()" @change="splitcalc(split.text)" min="0" :max="split.max" type="number" name="" placeholder="0" value="" class="bg-gray-300 block border border-gray-300 caret-indigo-600 font-black h-[55px] flex-1 focus:border-indigo-600 focus:ring-indigo-600 min-w-0 placeholder-gray-500 rounded-md text-2xl ml-2 pl-2" max="100">

                                                <div class="absolute flex inset-y-0 items-center pointer-events-none right-1 top-1/2 transform -translate-y-1/2 text-lg text-gray-900">
                                                    %
                                                </div>
                                            </div>
                                        </div>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Styled Input with Tailwind</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        /* Custom CSS to reverse the input direction and adjust padding */
        .reverse-input {
            direction: rtl;
            padding-right: 0.5rem; /* adjust as needed */
            padding-left: 2rem; /* adjust as needed */
        }
    </style>
</head>
<body class="bg-gray-100 p-10">

<div class="border flex justify-between items-center p-2 w-64">
    <span>Sally Douglas</span>
    <div class="flex items-center">
        <input type="number" class="outline-none border-none w-12 text-right reverse-input" value="25">
        <span class="ml-1">%</span> <!-- Adjust the ml-1 to control the spacing between the number and the % symbol -->
    </div>
</div>

</body>
</html>


[
    {"username": "user1", "password": "password1"},
    {"username": "user2", "password": "password2"},
    {"username": "user3", "password": "password3"}
]


import playwright.sync as p
import json

# Define a Playwright test function that takes data as parameters
def login_test(username, password):
    with p.sync_playwright() as sync_p:
        browser = sync_p.chromium.launch()
        page = browser.new_page()

        page.goto('https://example.com/login')
        page.fill('input[name="username"]', username)
        page.fill('input[name="password"]', password)
        page.click('input[type="submit"]')

        # Add assertions or further actions here as needed

        page.close()
        browser.close()

# Read data from the JSON file
with open('testdata.json', 'r') as file:
    test_data = json.load(file)

# Iterate through the data and run the test
for data in test_data:
    username = data['username']
    password = data['password']
    login_test(username, password)


import playwright.sync as p
import pandas as pd

# Read data from Excel
data = pd.read_excel('testdata.xlsx')

# Define a Playwright test function
def login_test(username, password):
    with p.sync_playwright() as sync_p:
        browser = sync_p.chromium.launch()
        page = browser.new_page()

        page.goto('https://example.com/login')
        page.fill('input[name="username"]', username)
        page.fill('input[name="password"]', password)
        page.click('input[type="submit"]')

        # Add assertions or further actions here as needed

        page.close()
        browser.close()

# Iterate through the data and run the test
for index, row in data.iterrows():
    username = row['Username']
    password = row['Password']
    login_test(username, password)
