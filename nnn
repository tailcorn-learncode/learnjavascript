package gov.mipath.atlas.gateway.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableMethodSecurity(securedEnabled = true)
public class SecurityConfig {

    @Value("${securityconf.okta.enabled}")
    private boolean isOktaSecurityEnabled;

    @Bean
    public SecurityFilterChain configure(HttpSecurity http) throws Exception {
        if (isOktaSecurityEnabled) {
            http.authorizeHttpRequests((requests) -> requests
            // allow anonymous access to the root page
            .requestMatchers("/").permitAll()
            // all other requests
            .anyRequest().authenticated());
            // enable OAuth2/OIDC
            http.oauth2Login();
            http.oauth2ResourceServer().jwt();
        }        

        return http.build();
    }
}


// import org.springframework.beans.factory.annotation.Autowired;
// // import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
// import org.springframework.context.annotation.Bean;
// import org.springframework.context.annotation.Configuration;
// import org.springframework.security.config.annotation.web.builders.HttpSecurity;
// import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;
// import org.springframework.security.config.web.server.ServerHttpSecurity;
// import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;
// import org.springframework.security.web.SecurityFilterChain;
// import org.springframework.security.web.server.SecurityWebFilterChain;

// @Configuration
// @EnableWebFluxSecurity
// // @ConditionalOnProperty(prefix = "rest.security", value = "enabled", havingValue = "true")
// public class SecurityConfig {

//     final JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();
//     @Autowired
//     private SecurityProperties securityProperties;

//     // @Bean
//     // public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity serverHttpSecurity) {
//     //     jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(new JwtAccessTokenCustomizer(securityProperties.getResourceId()));
//     //     serverHttpSecurity
//     //             .csrf((csrf)->csrf.disable())
//     //             .authorizeExchange(exchange ->
//     //                     exchange.pathMatchers(securityProperties.getApiMatcher())
//     //                             .permitAll()
//     //                             .anyExchange()
//     //                             .authenticated())
//     //                             //.oauth2ResourceServer(ServerHttpSecurity.OAuth2ResourceServerSpec::jwt);
//     //                             .oauth2ResourceServer(oauth2->oauth2.jwt(jwt -> {
//     //                                 jwt.jwtAuthenticationConverter(jwtAuthenticationConverter);
//     //                             }));
//     //                             // serverHttpSecurity.authorizeRequests(authorizeRequests -> authorizeRequests.anyRequest().authenticated()).oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt);                        
//     //     return serverHttpSecurity.build();
//     // }
 
//     @Bean
//     public SecurityFilterChain springSecurityFilterChain(HttpSecurity  httpSecurity) throws Exception {
//         jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(new JwtAccessTokenCustomizer(securityProperties.getResourceId()));
//             httpSecurity
//                 .csrf((csrf)->csrf.disable())
//                 .authorizeHttpRequests(exchange ->
//                     exchange.requestMatchers(securityProperties.getApiMatcher())
//                         .permitAll()
//                         .anyRequest()
//                         .authenticated())
//                         .oauth2ResourceServer(oauth2->oauth2.jwt(jwt -> {
//                             jwt.jwtAuthenticationConverter(jwtAuthenticationConverter);
//                         }));
//         return httpSecurity.build();         
//     }

// }





server:
    port: 8181

## Gateway
spring:
    application:
        name: gateway-service
    cloud:
        loadbalancer:
            ribbon:
                enabled: false
        gateway:
            globalcors:
                add-to-simple-url-handler-mapping: true
                cors-configurations:
                    '[/**]':
                        allow-credentials: true
                        allowed-methods: 
                            - OPTIONS
                            - GET
                            - POST
                            - PUT
            routes:
                - id: discovery-server
                  uri: http://localhost:8761
                  predicates:
                    - Path=/eureka/web
                  filters:
                    - SetPath=/
                - id: discovery-server-static
                  uri: http://localhost:8761
                  predicates:
                    - Path=/eureka/**
                - id: member-service
                  uri: http://localhost:8900/
                  predicates:
                    - Path=/member/**
                - id: ess-service
                  uri: http://localhost:8901/
                  predicates:
                    - Path=/ess/**
                - id: admin-service
                  uri: http://localhost:8902/
                  predicates:
                    - Path=/admin/**
        compatibility-verifier: 
            enabled: false
eureka:
    client:
        serviceUrl:
            defaultZone: http://localhost:8761/eureka

logging:
    pattern:
        level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

# Configuration to toggle Okta security
security:
    okta:
        enabled: true # toggle this to enable/disable Okta

# Okta Configuration
okta: 
    oauth2: 
        issuer: https://dev-04798219.okta.com/oauth2/default
        client-id: 0oabjwzqyhAd1VsxX5d7
        client-secret: ulsmzHE7Y3qUORZf5pzHldaWC-E9rrnlD8eHS2oMM7hsy3RUPEmIOaocoRTWxSDl





@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Value("${security.okta.enabled}")
    private boolean isOktaSecurityEnabled;

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        if (isOktaSecurityEnabled) {
            http
                .oauth2Login() // Configurations related to Okta
                .and()
                .oauth2ResourceServer().jwt();
                // Other Okta configurations...
        } else {
            http
                .authorizeRequests()
                .antMatchers("/**").permitAll() // This permits all without any authentication
                .and()
                .csrf().disable();  // Disabling CSRF. Do this with caution, especially in production!
        }
    }
}
