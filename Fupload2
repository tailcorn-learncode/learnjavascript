import { Component } from '@angular/core';
import { HttpClient, HttpEventType } from '@angular/common/http';
import { FileUploadService } from './file-upload.service';

@Component({
  selector: 'app-file-upload',
  templateUrl: './file-upload.component.html',
  styleUrls: ['./file-upload.component.css']
})
export class FileUploadComponent {
  selectedFiles: File[] = [];
  uploadProgress: number[] = [];
  uploadDir: string = 'dynamic_upload_directory'; // Specify your dynamic upload directory here

  constructor(private fileUploadService: FileUploadService) { }

  onFilesSelected(event: any) {
    this.selectedFiles = event.target.files;
    this.uploadProgress = new Array(this.selectedFiles.length).fill(0);
  }

  uploadFiles() {
    if (this.selectedFiles.length > 0) {
      const formData = new FormData();

      // Add files to the formData
      for (const file of this.selectedFiles) {
        formData.append('files', file);
      }

      // Add upload_dir to the formData
      formData.append('upload_dir', this.uploadDir);

      this.fileUploadService.uploadFiles(formData).subscribe(
        (event: any) => {
          if (event.type === HttpEventType.UploadProgress) {
            // Update progress for each file separately
            const index = event.body.index;
            this.uploadProgress[index] = Math.round((event.loaded / event.total) * 100);
          } else if (event.type === HttpEventType.Response) {
            // Handle the response here, e.g., display a success message
            console.log('Files uploaded successfully:', event.body);
          }
        },
        error => {
          console.error('Files upload failed:', error);
          // Handle error here
        }
      );
    }
  }
}

import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.net.MalformedURLException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.ArrayList;

@RestController
@RequestMapping("/api")
public class FileUploadController {

    @PostMapping("/upload")
    public ResponseEntity<List<String>> uploadFiles(
            @RequestParam("files") MultipartFile[] files,
            @RequestParam("upload_dir") String uploadDir // Remove this line
            @RequestBody String uploadDir // Add this line
    ) {
        List<String> fileNames = new ArrayList<>();

        try {
            // Create the upload directory if it doesn't exist
            Path uploadPath = Paths.get(uploadDir);
            if (!Files.exists(uploadPath)) {
                Files.createDirectories(uploadPath);
            }

            for (MultipartFile file : files) {
                String fileName = file.getOriginalFilename();
                Path filePath = uploadPath.resolve(fileName);
                file.transferTo(filePath);
                fileNames.add(fileName);
            }

            return ResponseEntity.ok(fileNames);
        } catch (IOException e) {
            return ResponseEntity.status(500).body(null);
        }
    }

    @GetMapping("/download/{fileName:.+}")
    public ResponseEntity<Resource> downloadFile(@PathVariable String fileName) {
        try {
            // Specify the download directory (if needed) and use it here
            Path uploadDir = Paths.get("uploads");
            Path filePath = uploadDir.resolve(fileName);
            Resource resource = new UrlResource(filePath.toUri());

            if (resource.exists() && resource.isReadable()) {
                return ResponseEntity.ok().body(resource);
            } else {
                return ResponseEntity.notFound().build();
            }
        } catch (MalformedURLException e) {
            return ResponseEntity.status(500).body(null);
        }
    }
}


<form (submit)="uploadFiles()" enctype="multipart/form-data">
  <input type="file" (change)="onFilesSelected($event)" multiple />
  <button type="submit">Upload</button>
</form>
<div *ngFor="let progress of uploadProgress; let i = index">
  File {{ i + 1 }} Progress: {{ progress }}%
  <mat-progress-bar mode="determinate" [value]="progress"></mat-progress-bar>
</div>



import { Injectable } from '@angular/core';
import { HttpClient, HttpEvent, HttpRequest } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class FileUploadService {
  private apiUrl = 'http://localhost:8080/api/upload'; // Your backend API URL

  constructor(private http: HttpClient) { }

  uploadFiles(formData: FormData): Observable<HttpEvent<any>> {
    const request = new HttpRequest('POST', this.apiUrl, formData, {
      reportProgress: true,
      responseType: 'text' // Specify the response type as text
    });

    return this.http.request(request);
  }
}


