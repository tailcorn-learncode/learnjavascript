package gov.mipath.atlas.admin.common.model;

import jakarta.persistence.*;
import lombok.Data;
import java.util.Date;
import java.util.Set;

@Data
@Entity
@Table(name = "organization")
public class Organization {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "organization_id")
    private Integer organizationId;

    @Column(name = "organization_cd")
    private String organizationCode;

    @Column(name = "organization_nm")
    private String organizationName;

    @Column(name = "organization_type_cd")
    private String organizationTypeCode;

    @Column(name = "organization_effective_dt")
    private Date organizationEffectiveDate;

    @Column(name = "organization_status_cd")
    private String organizationStatusCode;

    @Column(name = "employer_ind")
    private Boolean employerIndicator;

    @Column(name = "tax_nbr")
    private String taxNumber;

    @Column(name = "nbk_num")
    private Double nbkNumber;

    @Column(name = "document_folder_num")
    private Double documentFolderNumber;

    @Column(name = "service_contract_org_id")
    private Integer serviceContractOrgId;

    @Column(name = "school_district_nbr")
    private String schoolDistrictNumber;

    @Column(name = "county_cd")
    private String countyCode;

    @Column(name = "employer_reporting_mda_cd")
    private String employerReportingMdaCode;

    @Column(name = "first_posting_dt")
    private Date firstPostingDate;

    @Column(name = "payroll_deduction_ind")
    private Boolean payrollDeductionIndicator;

    @Column(name = "reporting_frequency_cd")
    private String reportingFrequencyCode;

    @Column(name = "reporting_format_cd")
    private String reportingFormatCode;

    @Column(name = "reporting_unit_id")
    private Integer reportingUnitId;

    @OneToMany(mappedBy = "organization", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Set<Address> addresses;

    // Default constructor, getters, setters, and other methods are handled by Lombok's @Data
}




package gov.mipath.atlas.admin.common.model;

import jakarta.persistence.*;
import lombok.Data;

@Data
@Entity
@Table(name = "address")
public class Address {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "addr_id")
    private Integer addrId;

    @Column(name = "addr_ln1_nm")
    private String addrLn1Nm;

    @Column(name = "addr_ln2_nm")
    private String addrLn2Nm;

    @Column(name = "city_nm")
    private String cityNm;

    @Column(name = "st_cd")
    private String stCd;

    @Column(name = "zip_cd")
    private String zipCd;

    @Column(name = "addr_ln3_nm")
    private String addrLn3Nm;

    @Column(name = "addr_ln4_nm")
    private String addrLn4Nm;

    @Column(name = "zip2")
    private String zip2;

    @Column(name = "frgn_prov_nm")
    private String frgnProvNm;

    @Column(name = "ctry_cd")
    private String ctryCd;

    @Column(name = "frgn_post_cd")
    private String frgnPostCd;

    @Column(name = "zip_cd_encrypt")
    private byte[] zipCdEncrypt;

    @Column(name = "zip_cd_mask")
    private String zipCdMask;

    @Column(name = "phone_nbr")
    private String phoneNbr;

    @Column(name = "email_nm")
    private String emailNm;

    @ManyToOne
    @JoinColumn(name = "organization_id", nullable = false)
    private Organization organization;

    // Default constructor, getters, setters, and other methods are handled by Lombok's @Data
}




package gov.mipath.atlas.admin.common.dto;

import gov.mipath.atlas.admin.common.model.Organization;
import gov.mipath.atlas.admin.common.model.Address;
import lombok.Data;

import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

@Data
public class OrganizationDto {
    private Integer organizationId;
    private String organizationCode;
    private String organizationName;
    private String organizationTypeCode;
    private Date organizationEffectiveDate;
    private String organizationStatusCode;
    private Boolean employerIndicator;
    private String taxNumber;
    private Double nbkNumber;
    private Double documentFolderNumber;
    private Integer serviceContractOrgId;
    private String schoolDistrictNumber;
    private String countyCode;
    private String employerReportingMdaCode;
    private Date firstPostingDate;
    private Boolean payrollDeductionIndicator;
    private String reportingFrequencyCode;
    private String reportingFormatCode;
    private Integer reportingUnitId;

    private List<AddressDto> addresses;

    public static OrganizationDto create(Organization entity) {
        OrganizationDto dto = new OrganizationDto();
        dto.setOrganizationId(entity.getOrganizationId());
        dto.setOrganizationCode(entity.getOrganizationCode());
        dto.setOrganizationName(entity.getOrganizationName());
        dto.setOrganizationTypeCode(entity.getOrganizationTypeCode());
        dto.setOrganizationEffectiveDate(entity.getOrganizationEffectiveDate());
        dto.setOrganizationStatusCode(entity.getOrganizationStatusCode());
        dto.setEmployerIndicator(entity.getEmployerIndicator());
        dto.setTaxNumber(entity.getTaxNumber());
        dto.setNbkNumber(entity.getNbkNumber());
        dto.setDocumentFolderNumber(entity.getDocumentFolderNumber());
        dto.setServiceContractOrgId(entity.getServiceContractOrgId());
        dto.setSchoolDistrictNumber(entity.getSchoolDistrictNumber());
        dto.setCountyCode(entity.getCountyCode());
        dto.setEmployerReportingMdaCode(entity.getEmployerReportingMdaCode());
        dto.setFirstPostingDate(entity.getFirstPostingDate());
        dto.setPayrollDeductionIndicator(entity.getPayrollDeductionIndicator());
        dto.setReportingFrequencyCode(entity.getReportingFrequencyCode());
        dto.setReportingFormatCode(entity.getReportingFormatCode());
        dto.setReportingUnitId(entity.getReportingUnitId());

        if (entity.getAddresses() != null) {
            dto.setAddresses(entity.getAddresses().stream().map(AddressDto::create).collect(Collectors.toList()));
        }
        return dto;
    }

    public Organization parse() {
        Organization entity = new Organization();
        entity.setOrganizationId(this.getOrganizationId());
        entity.setOrganizationCode(this.getOrganizationCode());
        entity.setOrganizationName(this.getOrganizationName());
        entity.setOrganizationTypeCode(this.getOrganizationTypeCode());
        entity.setOrganizationEffectiveDate(this.getOrganizationEffectiveDate());
        entity.setOrganizationStatusCode(this.getOrganizationStatusCode());
        entity.setEmployerIndicator(this.getEmployerIndicator());
        entity.setTaxNumber(this.getTaxNumber());
        entity.setNbkNumber(this.getNbkNumber());
        entity.setDocumentFolderNumber(this.getDocumentFolderNumber());
        entity.setServiceContractOrgId(this.getServiceContractOrgId());
        entity.setSchoolDistrictNumber(this.getSchoolDistrictNumber());
        entity.setCountyCode(this.getCountyCode());
        entity.setEmployerReportingMdaCode(this.getEmployerReportingMdaCode());
        entity.setFirstPostingDate(this.getFirstPostingDate());
        entity.setPayrollDeductionIndicator(this.getPayrollDeductionIndicator());
        entity.setReportingFrequencyCode(this.getReportingFrequencyCode());
        entity.setReportingFormatCode(this.getReportingFormatCode());
        entity.setReportingUnitId(this.getReportingUnitId());

        if (this.getAddresses() != null) {
            entity.setAddresses(this.getAddresses().stream().map(AddressDto::parse).collect(Collectors.toSet()));
        }
        return entity;
    }
}




package gov.mipath.atlas.admin.common.dto;

import gov.mipath.atlas.admin.common.model.Address;
import lombok.Data;

@Data
public class AddressDto {
    private Integer addrId;
    private String addrLn1Nm;
    private String addrLn2Nm;
    private String cityNm;
    private String stCd;
    private String zipCd;
    private String addrLn3Nm;
    private String addrLn4Nm;
    private String zip2;
    private String frgnProvNm;
    private String ctryCd;
    private String frgnPostCd;
    private byte[] zipCdEncrypt;
    private String zipCdMask;
    private String phoneNbr;
    private String emailNm;

    private Integer organizationId; // Reference to the Organization

    public static AddressDto create(Address entity) {
        AddressDto dto = new AddressDto();
        dto.setAddrId(entity.getAddrId());
        dto.setAddrLn1Nm(entity.getAddrLn1Nm());
        dto.setAddrLn2Nm(entity.getAddrLn2Nm());
        dto.setCityNm(entity.getCityNm());
        dto.setStCd(entity.getStCd());
        dto.setZipCd(entity.getZipCd());
        dto.setAddrLn3Nm(entity.getAddrLn3Nm());
        dto.setAddrLn4Nm(entity.getAddrLn4Nm());
        dto.setZip2(entity.getZip2());
        dto.setFrgnProvNm(entity.getFrgnProvNm());
        dto.setCtryCd(entity.getCtryCd());
        dto.setFrgnPostCd(entity.getFrgnPostCd());
        dto.setZipCdEncrypt(entity.getZipCdEncrypt());
        dto.setZipCdMask(entity.getZipCdMask());
        dto.setPhoneNbr(entity.getPhoneNbr());
        dto.setEmailNm(entity.getEmailNm());

        if (entity.getOrganization() != null) {
            dto.setOrganizationId(entity.getOrganization().getOrganizationId());
        }
        return dto;
    }

    public Address parse() {
        Address entity = new Address();
        entity.setAddrId(this.getAddrId());
        entity.setAddrLn1Nm(this.getAddrLn1Nm());
        entity.setAddrLn2Nm(this.getAddrLn2Nm());
        entity.setCityNm(this.getCityNm());
        entity.setStCd(this.getStCd());
        entity.setZipCd(this.getZipCd());
        entity.setAddrLn3Nm(this.getAddrLn3Nm());
        entity.setAddrLn4Nm(this.getAddrLn4Nm());
        entity.setZip2(this.getZip2());
        entity.setFrgnProvNm(this.getFrgnProvNm());
        entity.setCtryCd(this.getCtryCd());
        entity.setFrgnPostCd(this.getFrgnPostCd());
        entity.setZipCdEncrypt(this.getZipCdEncrypt());
        entity.setZipCdMask(this.getZipCdMask());
        entity.setPhoneNbr(this.getPhoneNbr());
        entity.setEmailNm(this.getEmailNm());
        // The organization relationship should be set in the context of the service layer
        return entity;
    }
}




package gov.mipath.atlas.admin.common.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import gov.mipath.atlas.admin.common.model.Organization;

public interface OrganizationRepository extends JpaRepository<Organization, Integer> {
    // Additional custom methods if needed
}



package gov.mipath.atlas.admin.common.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import gov.mipath.atlas.admin.common.model.Organization;
import gov.mipath.atlas.admin.common.repository.OrganizationRepository;
import gov.mipath.atlas.admin.common.dto.OrganizationDto;

@Service
public class OrganizationService {

    @Autowired
    private OrganizationRepository organizationRepository;

    public Organization findById(Integer id) {
        return organizationRepository.findById(id).orElse(null);
    }

    public Organization updateOrganization(Integer organizationId, OrganizationDto organizationDto) {
        Organization organization = organizationRepository.findById(organizationId)
            .orElseThrow(() -> new RuntimeException("Organization not found"));

        // Update fields
        // Note: You need to add null checks and update only the fields provided
        organization.setOrganizationCode(organizationDto.getOrganizationCode());
        // Repeat for other fields

        return organizationRepository.save(organization);
    }
}



package gov.mipath.atlas.admin.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import gov.mipath.atlas.admin.common.service.OrganizationService;
import gov.mipath.atlas.admin.common.dto.OrganizationDto;

@RestController
@RequestMapping("/admin/organizations")
public class OrganizationController {

    @Autowired
    private OrganizationService organizationService;

    @GetMapping("/{id}")
    public ResponseEntity<OrganizationDto> getOrganizationById(@PathVariable Integer id) {
        Organization organization = organizationService.findById(id);
        if (organization == null) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(OrganizationDto.create(organization));
    }

    @PatchMapping("/{id}")
    public ResponseEntity<OrganizationDto> updateOrganization(@PathVariable Integer id, @RequestBody OrganizationDto organizationDto) {
        try {
            Organization updatedOrganization = organizationService.updateOrganization(id, organizationDto);
            return ResponseEntity.ok(OrganizationDto.create(updatedOrganization));
        } catch (RuntimeException e) {
            return ResponseEntity.notFound().build();
        } catch (Exception e) {
            return ResponseEntity.internalServerError().build();
        }
    }

    // Additional endpoints as required
}




// ... in OrganizationService ...

public Organization updateOrganizationAndAddresses(Integer organizationId, OrganizationDto organizationDto) {
    Organization organization = organizationRepository.findById(organizationId)
        .orElseThrow(() -> new RuntimeException("Organization not found"));

    // Update organization fields
    // ...

    // Update addresses
    if (organizationDto.getAddresses() != null) {
        organization.getAddresses().clear(); // Clear existing addresses
        organizationDto.getAddresses().forEach(addressDto -> {
            Address address = addressDto.parse(); // Convert DTO to entity
            address.setOrganization(organization); // Set organization to address
            organization.getAddresses().add(address); // Add address to organization
        });
    }

    return organizationRepository.save(organization);
}


@RestController
@RequestMapping("/admin/organizations")
public class OrganizationController {

    @Autowired
    private OrganizationService organizationService;

    // ... other endpoints ...

    @PatchMapping("/{id}")
    public ResponseEntity<OrganizationDto> updateOrganization(@PathVariable Integer id, @RequestBody OrganizationDto organizationDto) {
        try {
            Organization updatedOrganization = organizationService.updateOrganizationAndAddresses(id, organizationDto);
            return ResponseEntity.ok(OrganizationDto.create(updatedOrganization));
        } catch (RuntimeException e) {
            return ResponseEntity.notFound().build();
        } catch (Exception e) {
            return ResponseEntity.internalServerError().build();
        }
    }
}






