import { Injectable } from '@angular/core';
import {
  HttpRequest,
  HttpHandler,
  HttpEvent,
  HttpInterceptor,
  HttpErrorResponse
} from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { AuthService } from '../services/auth.service';
import { catchError, switchMap, first } from 'rxjs/operators';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {

  constructor(private authService: AuthService) {}

  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    // Use `first()` to make sure we only subscribe once and complete.
    return this.authService.getAccessToken().pipe(
      first(),
      switchMap(token => {
        // If the token is available, clone the request and add the authorization header.
        if (token) {
          request = request.clone({
            setHeaders: {
              Authorization: `Bearer ${token}`
            }
          });
        }
        return next.handle(request);
      }),
      catchError((error: HttpErrorResponse) => {
        // Handle specific HTTP errors here, potentially refreshing the token or redirecting
        // For example, if you get a 401 Unauthorized response, you might want to refresh the token
        if (error.status === 401) {
          // Optionally refresh token or handle unauthorized error
        }
        return throwError(error);
      })
    );
  }
}








import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import jwtDecode from 'jwt-decode';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private apiUrl = '/oauth2/auth'; // Adjust according to your API
  private accessToken = new BehaviorSubject<string | null>(null);
  private userDetails = new BehaviorSubject<any | null>(null);

  constructor(private http: HttpClient) {}

  fetchAccessToken(): Observable<string> {
    return this.http.get(this.apiUrl, { observe: 'response' }).pipe(
      map(response => {
        const token = response.headers.get('X-Auth-Request-Access-Token');
        if (token) {
          this.accessToken.next(token);
          this.decodeAndStoreUserDetails(token);
        }
        return token;
      })
    );
  }

  getAccessToken(forceRefresh: boolean = false): Observable<string | null> {
    if (forceRefresh || !this.accessToken.value) {
      return this.fetchAccessToken();
    } else {
      return this.accessToken.asObservable();
    }
  }

  decodeAndStoreUserDetails(token: string) {
    const decoded = jwtDecode<any>(token); // Use the correct type here
    this.userDetails.next(decoded);
    // You may want to extract and store only the relevant user details
  }

  getUserDetails(): Observable<any> {
    return this.userDetails.asObservable();
  }
}




import { Component, OnInit } from '@angular/core';
import { AuthService } from '../services/auth.service';

@Component({
  selector: 'app-ess-header',
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.scss']
})
export class HeaderComponent implements OnInit {
  fullname: string = '';
  initials: string = '';
  username: string = '';

  constructor(private authService: AuthService) {}

  ngOnInit() {
    this.authService.getUserDetails().subscribe(userDetails => {
      if (userDetails) {
        // Assuming userDetails contains the fields needed
        this.fullname = this.formatFullName(userDetails.given_name, userDetails.family_name);
        this.initials = this.getInitials(userDetails.given_name, userDetails.family_name);
        this.username = this.formatWelcomeName(userDetails.given_name);
      }
    });
  }

  // Implement formatFullName, getInitials, formatWelcomeName as needed
}



import { Injectable } from '@angular/core';
import {
  HttpRequest,
  HttpHandler,
  HttpEvent,
  HttpInterceptor
} from '@angular/common/http';
import { Observable, of } from 'rxjs';
import { switchMap, catchError } from 'rxjs/operators';
import { AuthService } from '../services/auth.service';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {

  constructor(private authService: AuthService) {}

  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    return this.authService.getAccessToken().pipe(
      switchMap(token => {
        if (token) {
          request = request.clone({
            setHeaders: {
              Authorization: `Bearer ${token}`,
            }
          });
        }
        return next.handle(request);
      }),
      catchError((err) => {
        // Handle any errors that occur during token retrieval or request handling
        console.error('Error in request or token retrieval', err);
        return of(err);
      })
    );
  }
}
