
package com.report.dev.demo.entity;

import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.TypeAlias;
import org.springframework.data.cosmos.core.mapping.Container;

@Container(containerName = "batchContainer") // Update containerName accordingly
@TypeAlias("BatchEntity") // Update alias if needed
public class BatchEntity {

    @Id
    private String batchId;
    private String batchName;
    private String reportName; // Referencing the report in the reporting container

    // Constructors

    public BatchEntity() {
    }

    public BatchEntity(String batchId, String batchName, String reportName) {
        this.batchId = batchId;
        this.batchName = batchName;
        this.reportName = reportName;
    }

    // Getters and Setters

    public String getBatchId() {
        return batchId;
    }

    public void setBatchId(String batchId) {
        this.batchId = batchId;
    }

    public String getBatchName() {
        return batchName;
    }

    public void setBatchName(String batchName) {
        this.batchName = batchName;
    }

    public String getReportName() {
        return reportName;
    }

    public void setReportName(String reportName) {
        this.reportName = reportName;
    }
}



package com.report.dev.demo.repository;

import com.azure.spring.data.cosmos.repository.CosmosRepository;
import com.report.dev.demo.entity.BatchEntity;

public interface BatchRepository extends CosmosRepository<BatchEntity, String> {

    // Custom query methods, if needed
}


@RestController
@RequestMapping("/batches")
public class BatchController {

    private final BatchService batchService;

    @Autowired
    public BatchController(BatchService batchService) {
        this.batchService = batchService;
    }

    @PostMapping
    public ResponseEntity<BatchEntity> createBatch(@RequestBody BatchEntity batch) {
        BatchEntity createdBatch = batchService.createBatch(batch);
        return ResponseEntity.ok(createdBatch);
    }

    @GetMapping
    public ResponseEntity<List<BatchEntity>> getAllBatches() {
        List<BatchEntity> batches = batchService.getAllBatches();
        return ResponseEntity.ok(batches);
    }

    @GetMapping("/{batchId}")
    public ResponseEntity<BatchEntity> getBatchById(@PathVariable String batchId) {
        BatchEntity batch = batchService.getBatchById(batchId);
        if (batch != null) {
            return ResponseEntity.ok(batch);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/{batchId}")
    public ResponseEntity<Void> deleteBatch(@PathVariable String batchId) {
        boolean deleted = batchService.deleteBatch(batchId);
        if (deleted) {
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}



public interface BatchService {

    BatchEntity createBatch(BatchEntity batch);

    List<BatchEntity> getAllBatches();

    BatchEntity getBatchById(String batchId);

    boolean deleteBatch(String batchId);

    // Other methods as needed
}


public class BatchServiceImpl implements BatchService {

    private final BatchRepository batchRepository;

    @Autowired
    public BatchServiceImpl(BatchRepository batchRepository) {
        this.batchRepository = batchRepository;
    }

    @Override
    public BatchEntity createBatch(BatchEntity batch) {
        return batchRepository.save(batch);
    }

    @Override
    public List<BatchEntity> getAllBatches() {
        return batchRepository.findAll();
    }

    @Override
    public BatchEntity getBatchById(String batchId) {
        return batchRepository.findById(batchId).orElse(null);
    }

    @Override
    public boolean deleteBatch(String batchId) {
        BatchEntity batch = getBatchById(batchId);
        if (batch != null) {
            batchRepository.delete(batch);
            return true;
        }
        return false;
    }

    // Implement other methods
}

