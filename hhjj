Given below is angular code

component..
delete() {
		console.log(this.currentFileUpload.id);
		this.service.deleteById(this.currentFileUpload.id).subscribe({
			next: (res) => {
				this.refreshTable();
			},
			error: (e) => console.error(e)
			
		});
	}


service..
deleteById(id: any) {
		return this.http.delete(`${this.apiUrl}/eFile/deleteFile/${id}`);
	}

I'm getting error

"Unexpected non-whitespace character after JSON at position 2"


import com.azure.storage.blob.BlobServiceClient;
import com.azure.storage.blob.BlobServiceClientBuilder;
import com.azure.storage.blob.BlobContainerClient;
import com.azure.storage.blob.BlobClient;
import org.springframework.stereotype.Service;
import org.springframework.util.StreamUtils;

import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Path;
import java.nio.file.Paths;

@Service
public class AzureStorageService {

    // Azure Storage connection string
    private final String connectionString = "your_connection_string_here";

    public void downloadFileFromBlobStorage(String containerName, String blobName) {
        BlobServiceClient blobServiceClient = new BlobServiceClientBuilder()
                .connectionString(connectionString)
                .buildClient();

        BlobContainerClient containerClient = blobServiceClient.getBlobContainerClient(containerName);
        BlobClient blobClient = containerClient.getBlobClient(blobName);

        try (InputStream blobInputStream = blobClient.openQueryInputStream()) {
            // Replace with your desired local file path
            Path localFilePath = Paths.get("local_file_path_here");
            StreamUtils.copy(blobInputStream, Files.newOutputStream(localFilePath));
        } catch (IOException e) {
            // Handle exceptions
            e.printStackTrace();
        }
    }
}




import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

@RestController
@RequestMapping("/api")
public class YourController {

    @DeleteMapping("/deleteFile")
    public ResponseEntity<String> deleteFile(@RequestParam("filePath") String filePath) {
        try {
            // Convert the file path string to a Path object
            Path path = Paths.get(filePath);

            // Check if the file exists
            if (Files.exists(path)) {
                // Attempt to delete the file
                Files.delete(path);
                return ResponseEntity.status(HttpStatus.OK).body("File deleted successfully.");
            } else {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("File not found.");
            }
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to delete the file: " + e.getMessage());
        }
    }
}

    @GetMapping("/download/{fileName:.+}")
    public ResponseEntity<Resource> downloadFile(@PathVariable String fileName) {
        try {
            Path filePath = Paths.get(UPLOAD_DIR).resolve(fileName);
            Resource resource = new UrlResource(filePath.toUri());

            if (resource.exists() && resource.isReadable()) {
                return ResponseEntity.ok().body(resource);
            } else {
                return ResponseEntity.notFound().build();
            }
        } catch (MalformedURLException e) {
            return ResponseEntity.status(500).body(null);
        }
    }


import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
@EnableWebMvc
public class CorsConfig implements WebMvcConfigurer {

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
            .allowedOrigins("http://localhost:4200") // Replace with your Angular app's URL
            .allowedMethods("GET", "POST", "PUT", "DELETE")
            .allowedHeaders("*");
    }
}

java.lang.NoSuchMethodError: 'org.openxmlformats.schemas.spreadsheetml.x2006.main.CTFontFamily org.openxmlformats.schemas.spreadsheetml.x2006.main.CTFont.addNewFamily()




package com.knf.dev.demo.entity;

// ... other imports

@Container(containerName = "User")
public class User {

	@Id
	@GeneratedValue
	private String id;
	private String firstName;
	private String lastName;
	private String email;
	private int age; // New column
	private String address; // New column
	private String phoneNumber; // New column

	// ... existing constructors

	public User(String firstName, String lastName, String email, int age, String address, String phoneNumber) {
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.age = age;
		this.address = address;
		this.phoneNumber = phoneNumber;
	}

	// ... existing getters and setters

	// New getters and setters for the new columns
	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public String getPhoneNumber() {
		return phoneNumber;
	}

	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}
}






@RestController
@RequestMapping("/api/v1/users")
public class UserController {

	// ... existing methods

	// New endpoint to retrieve users by specific columns
	@PostMapping("/columns")
	public ResponseEntity<List<Map<String, Object>>> getUsersByColumns(@RequestBody List<String> columns) {
		try {
			// Retrieve users with only the requested columns
			List<Map<String, Object>> users = userService.getUsersByColumns(columns);
			return new ResponseEntity<>(users, HttpStatus.OK);
		} catch (Exception e) {
			throw new UnKnownException(e.getMessage());
		}
	}
}








// New endpoint to retrieve users by specific columns
@PostMapping("/columns")
public ResponseEntity<List<Map<String, Object>>> getUsersByColumns(@RequestBody List<String> columns) {
	try {
		List<Map<String, Object>> users = new ArrayList<>();
		userRepository.findAll().forEach(user -> {
			Map<String, Object> userMap = new HashMap<>();
			if (columns.contains("id")) userMap.put("id", user.getId());
			if (columns.contains("firstName")) userMap.put("firstName", user.getFirstName());
			if (columns.contains("lastName")) userMap.put("lastName", user.getLastName());
			if (columns.contains("email")) userMap.put("email", user.getEmail());
			if (columns.contains("age")) userMap.put("age", user.getAge());
			if (columns.contains("address")) userMap.put("address", user.getAddress());
			if (columns.contains("phoneNumber")) userMap.put("phoneNumber", user.getPhoneNumber());
			users.add(userMap);
		});
		return new ResponseEntity<>(users, HttpStatus.OK);
	} catch (Exception e) {
		throw new UnKnownException(e.getMessage());
	}
}




package com.knf.dev.demo.service;

import com.knf.dev.demo.entity.User;
import com.knf.dev.demo.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class UserService {

	@Autowired
	UserRepository userRepository;

	public List<Map<String, Object>> getUsersByColumns(List<String> columns) {
		List<Map<String, Object>> users = new ArrayList<>();
		userRepository.findAll().forEach(user -> {
			Map<String, Object> userMap = new HashMap<>();
			if (columns.contains("id")) userMap.put("id", user.getId());
			if (columns.contains("firstName")) userMap.put("firstName", user.getFirstName());
			if (columns.contains("lastName")) userMap.put("lastName", user.getLastName());
			if (columns.contains("email")) userMap.put("email", user.getEmail());
			if (columns.contains("age")) userMap.put("age", user.getAge());
			if (columns.contains("address")) userMap.put("address", user.getAddress());
			if (columns.contains("phoneNumber")) userMap.put("phoneNumber", user.getPhoneNumber());
			users.add(userMap);
		});
		return users;
	}
}

