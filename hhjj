package com.knf.dev.demo.entity;

// ... other imports

@Container(containerName = "User")
public class User {

	@Id
	@GeneratedValue
	private String id;
	private String firstName;
	private String lastName;
	private String email;
	private int age; // New column
	private String address; // New column
	private String phoneNumber; // New column

	// ... existing constructors

	public User(String firstName, String lastName, String email, int age, String address, String phoneNumber) {
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.age = age;
		this.address = address;
		this.phoneNumber = phoneNumber;
	}

	// ... existing getters and setters

	// New getters and setters for the new columns
	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public String getPhoneNumber() {
		return phoneNumber;
	}

	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}
}






@RestController
@RequestMapping("/api/v1/users")
public class UserController {

	// ... existing methods

	// New endpoint to retrieve users by specific columns
	@PostMapping("/columns")
	public ResponseEntity<List<Map<String, Object>>> getUsersByColumns(@RequestBody List<String> columns) {
		try {
			// Retrieve users with only the requested columns
			List<Map<String, Object>> users = userService.getUsersByColumns(columns);
			return new ResponseEntity<>(users, HttpStatus.OK);
		} catch (Exception e) {
			throw new UnKnownException(e.getMessage());
		}
	}
}








// New endpoint to retrieve users by specific columns
@PostMapping("/columns")
public ResponseEntity<List<Map<String, Object>>> getUsersByColumns(@RequestBody List<String> columns) {
	try {
		List<Map<String, Object>> users = new ArrayList<>();
		userRepository.findAll().forEach(user -> {
			Map<String, Object> userMap = new HashMap<>();
			if (columns.contains("id")) userMap.put("id", user.getId());
			if (columns.contains("firstName")) userMap.put("firstName", user.getFirstName());
			if (columns.contains("lastName")) userMap.put("lastName", user.getLastName());
			if (columns.contains("email")) userMap.put("email", user.getEmail());
			if (columns.contains("age")) userMap.put("age", user.getAge());
			if (columns.contains("address")) userMap.put("address", user.getAddress());
			if (columns.contains("phoneNumber")) userMap.put("phoneNumber", user.getPhoneNumber());
			users.add(userMap);
		});
		return new ResponseEntity<>(users, HttpStatus.OK);
	} catch (Exception e) {
		throw new UnKnownException(e.getMessage());
	}
}




package com.knf.dev.demo.service;

import com.knf.dev.demo.entity.User;
import com.knf.dev.demo.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class UserService {

	@Autowired
	UserRepository userRepository;

	public List<Map<String, Object>> getUsersByColumns(List<String> columns) {
		List<Map<String, Object>> users = new ArrayList<>();
		userRepository.findAll().forEach(user -> {
			Map<String, Object> userMap = new HashMap<>();
			if (columns.contains("id")) userMap.put("id", user.getId());
			if (columns.contains("firstName")) userMap.put("firstName", user.getFirstName());
			if (columns.contains("lastName")) userMap.put("lastName", user.getLastName());
			if (columns.contains("email")) userMap.put("email", user.getEmail());
			if (columns.contains("age")) userMap.put("age", user.getAge());
			if (columns.contains("address")) userMap.put("address", user.getAddress());
			if (columns.contains("phoneNumber")) userMap.put("phoneNumber", user.getPhoneNumber());
			users.add(userMap);
		});
		return users;
	}
}

