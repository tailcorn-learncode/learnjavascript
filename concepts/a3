I'm deploying angular applications employer, member, atlas.
I want to implement azure Active Directory authentication using oauth2-proxy for emploer angular application.
Below are working related files..

Now i want to login information to be passed to employer application. please help me to pass the login information to employer application.

docker-compose.yml

version: "3.9"
services:

  oauth2-proxy:
    # image: bitnami/oauth2-proxy:7.3.0
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    container_name: oauth2-proxy
    command:
      - --http-address
      - 0.0.0.0:4180
    environment:
      OAUTH2_PROXY_UPSTREAMS: "http://nginx:9080/"
      OAUTH2_PROXY_WHITELIST_DOMAINS: localhost:*
      OAUTH2_PROXY_EMAIL_DOMAINS: '*'
      OAUTH2_PROXY_PROVIDER: oidc
      OAUTH2_PROXY_PROVIDER_DISPLAY_NAME: SOM
      OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: "true"
      OAUTH2_PROXY_REDIRECT_URL: http://localhost:4180/oauth2/callback
      OAUTH2_PROXY_REVERSE_PROXY: "true"
      OAUTH2_PROXY_OIDC_GROUPS_CLAIM: roles

      OAUTH2_PROXY_AZURE_TENANT: ${TENANT_ID}
      OAUTH2_PROXY_OIDC_ISSUER_URL: ${ISSUER}
      OAUTH2_PROXY_CLIENT_ID: ${CLIENT_ID}
      OAUTH2_PROXY_CLIENT_SECRET: ${CLIENT_SECRET}

      OAUTH2_PROXY_SKIP_JWT_BEARER_TOKENS: "true"
      OAUTH2_PROXY_OIDC_EXTRA_AUDIENCES: api://default
      OAUTH2_PROXY_OIDC_EMAIL_CLAIM: sub

      OAUTH2_PROXY_SET_XAUTHREQUEST: "true"
      OAUTH2_PROXY_PASS_ACCESS_TOKEN: "true"
      
      OAUTH2_PROXY_COOKIE_REFRESH: 30m
      OAUTH2_PROXY_COOKIE_NAME: SESSION
      OAUTH2_PROXY_COOKIE_SECRET: ${OAUTH2_PROXY_COOKIE_SECRET}
      OAUTH2_PROXY_COOKIE_SECURE: "true"
      OAUTH2_PROXY_COOKIE_SAMESITE: lax
      OAUTH2_PROXY_SESSION_STORE_TYPE: redis
      OAUTH2_PROXY_REDIS_CONNECTION_URL: redis://redis
    ports:
      - 4180:4180
    expose:
      - "4180"
    depends_on:
      - redis

  redis:
    image: redis:7.0.2-alpine3.16
    container_name: redis
    volumes:
      - cache:/data

  nginx:
    image: nginx:1.25.3-alpine3.18-slim
    container_name: nginx
    restart: unless-stopped
    volumes:
      - ./nginx-main.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 9080:9080
    expose:
      - "9080"
    depends_on:
      - oauth2-proxy
      - employer-web  

#Atlas App Front-end
  # atlas-web: 
  #   build: 
  #     context: ./
  #     dockerfile: ./Dockerfile
  #     args:
  #       - TARGET_APP=atlas
  #       - TARGET_BUILD=local
  #   image: atlas-app/atlas-web:latest
  #   container_name: atlas-web
  #   ports: 
  #     - 8910:8910
  #   expose:
  #     - "8910"

#Employer Service App Front End
  employer-web:
    build: 
      context: ./
      dockerfile: ./Dockerfile
      args:
        - TARGET_APP=employer
        - TARGET_BUILD=local        
    image: atlas-app/employer-web:latest
    container_name: employer-web
    ports: 
      - 8911:8911
    expose:
      - "8911"  

#MiAccount App Front End
  member-web: 
    build: 
      context: ./
      dockerfile: ./Dockerfile
      args:
        - TARGET_APP=member
        - TARGET_BUILD=local        
    image: atlas-app/member-web:latest
    container_name: member-web       
    ports: 
      - 8912:8912
    expose:
      - "8912"

volumes:
  cache:
    driver: local


Dockerfile

# Stage 0, "build-es", based on Node.js, to build and compile Angular
FROM node:18.17.1-bullseye-slim as build-atlas

ARG TARGET_APP
ARG TARGET_BUILD

RUN mkdir /atlas
WORKDIR /atlas

COPY package*.json /atlas/

RUN npm install --force
#RUN npm install -g npm@10.4.0

#RUN npm install -g @angular/cli@16.2.8

COPY ./ /atlas/

ARG CONFIG_APP=prod
ARG BUILD_APP=build-${TARGET_APP}-${TARGET_BUILD}


# RUN echo ${TARGET_APP}
RUN echo ${BUILD_APP}

RUN npm run ${BUILD_APP} -- --output-path=./dist/out --base-href=/${TARGET_APP}/ --deploy-url=/${TARGET_APP}/

# Stage 1, based on Nginx, to have only the compiled app, ready for production with Nginx
FROM nginx
ARG TARGET_APP
COPY --from=build-atlas /atlas/dist/out/ /usr/share/nginx/html
# # Copy the default nginx.conf provided by tiangolo/node-frontend

ARG NGINXFILE_APP="nginx-${TARGET_APP}.conf"
RUN echo ${NGINXFILE_APP}
COPY --from=build-atlas /atlas/${NGINXFILE_APP} /etc/nginx/conf.d/default.conf


nginx-main.conf

server {
    server_name _;
    listen      9080;

    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection "1; mode=block";

    proxy_busy_buffers_size   512k;
    proxy_buffers   4 512k;
    proxy_buffer_size   512k;

    client_body_buffer_size     32k;
    client_header_buffer_size   8k;
    large_client_header_buffers 8 64k;
    
    location /employer/ {        
        
        # root /;
        # expires -1;
        
        # if the authorization header was set (i.e. `Authorization: Bearer {token}`
        # assume API client and do NOT redirect to login
        if ($http_authorization = "") {
            error_page 401 = /oauth2/start;
        }
        rewrite ^/employer(/|$)(.*) "/$2" break;
        auth_request_set $email  $upstream_http_x_auth_request_email;        
        auth_request_set $user  $upstream_http_x_auth_request_user;
        auth_request_set $token  $upstream_http_x_auth_request_access_token;
        auth_request_set $auth_cookie $upstream_http_set_cookie;

        proxy_set_header X-Email $email;
        proxy_set_header X-User  $user;        
        proxy_set_header X-Access-Token $token;       
        add_header Set-Cookie $auth_cookie;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host:9080;
        proxy_set_header X-Forwarded-Port 9080;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Uri $request_uri;

        proxy_http_version 1.1;        
        auth_request /oauth2/auth;
        proxy_pass http://employer-web:8911/;
        # proxy_pass /employer;
    }   

    location /oauth2/ {
        # internal;
        
        proxy_set_header Host                    $host;
        proxy_set_header X-Real-IP               $remote_addr;
        proxy_set_header X-Scheme                $scheme;
        # proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Auth-Request-Redirect $request_uri;
        proxy_set_header X-Forwarded-Uri         $request_uri;
        
        proxy_pass http://oauth2-proxy:4180;
    }
    location = /oauth2/auth {
        internal;
        
        proxy_set_header Host             $host;
        proxy_set_header X-Real-IP        $remote_addr;
        proxy_set_header X-Scheme         $scheme;
        proxy_set_header X-Forwarded-Uri  $request_uri;
        # nginx auth_request includes headers but not body
        proxy_set_header Content-Length   "";
        proxy_pass_request_body           off;
        proxy_pass       http://oauth2-proxy:4180;
    }
    location = /oauth2/sign_out {

        # Sign-out mutates the session, only allow POST requests
        if ($request_method != POST) {
            return 405;
        }

        proxy_set_header Host                    $host;
        proxy_set_header X-Real-IP               $remote_addr;
        proxy_set_header X-Scheme                $scheme;
        # proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Auth-Request-Redirect /oauth2/sign_in;
        proxy_pass http://oauth2-proxy:4180;
    }    

    # This isn't covered blog post, but this is a simple
    # HTML page that has an ugly little "logout" button
    # This button will send a POST request to `/oauth2/sign-out`
    location /logout.html {
        root /usr/share/nginx/html;
    }
}


nginx-employer.conf

server {
    server_name _;
    listen      8911;
    index   index.html index.htm;  

    location / {
        root    /usr/share/nginx/html; 
        try_files $uri $uri/ /index.html;
    }
    location ~ /employer(/.*)?$ {        
        alias    /usr/share/nginx/html/;
        try_files $uri $uri/ /index.html;
    }

}


nginx-atlas.conf

server {
    server_name _;
    listen      8910;
    index   index.html index.htm;  

    location / {
        root    /usr/share/nginx/html; 
        try_files $uri $uri/ /index.html;
    }
    location ~ /atlas(/.*)?$ {        
        alias    /usr/share/nginx/html/;
        try_files $uri $uri/ /index.html;
    }
}


nginx-member.conf

server {
    server_name _;
    listen      8912;
    index   index.html index.htm;  

    location / {
        root    /usr/share/nginx/html; 
        try_files $uri $uri/ /index.html;
    }
    location ~ /member(/.*)?$ {        
        alias    /usr/share/nginx/html/;
        try_files $uri $uri/ /index.html;
    }
}


