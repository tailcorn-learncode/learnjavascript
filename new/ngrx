NGRX Example

Actions (items.actions.ts)
import { createAction, props } from '@ngrx/store';

export const loadItems = createAction('[Items] Load Items');
export const loadItemsSuccess = createAction('[Items] Load Items Success', props<{ items: string[] }>());
export const loadItemsFailure = createAction('[Items] Load Items Failure', props<{ error: any }>());


Reducer (items.reducer.ts)
import { createReducer, on } from '@ngrx/store';
import * as ItemsActions from './items.actions';

export const itemsFeatureKey = 'items';

export interface State {
  items: string[];
  error: any;
}

export const initialState: State = {
  items: [],
  error: null,
};

export const reducer = createReducer(
  initialState,
  on(ItemsActions.loadItemsSuccess, (state, action) => ({ ...state, items: action.items })),
  on(ItemsActions.loadItemsFailure, (state, action) => ({ ...state, error: action.error })),
);


Effects (items.effects.ts)
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { EMPTY } from 'rxjs';
import { catchError, map, mergeMap } from 'rxjs/operators';
import { ItemsService } from '../items.service';
import * as ItemsActions from './items.actions';

@Injectable()
export class ItemsEffects {
  loadItems$ = createEffect(() => this.actions$.pipe(
    ofType(ItemsActions.loadItems),
    mergeMap(() => this.itemsService.getAll()
      .pipe(
        map(items => ItemsActions.loadItemsSuccess({ items })),
        catchError(() => EMPTY)
      ))
    )
  );

  constructor(
    private actions$: Actions,
    private itemsService: ItemsService
  ) {}
}


Selectors (items.selectors.ts)
import { createFeatureSelector, createSelector } from '@ngrx/store';
import * as fromItems from './items.reducer';

export const selectItemsState = createFeatureSelector<fromItems.State>(
  fromItems.itemsFeatureKey
);

export const selectItems = createSelector(
  selectItemsState,
  (state: fromItems.State) => state.items
);

export const selectError = createSelector(
  selectItemsState,
  (state: fromItems.State) => state.error
);


App Module (app.module.ts)
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { StoreModule } from '@ngrx/store';
import { EffectsModule } from '@ngrx/effects';
import { AppComponent } from './app.component';
import { itemsFeatureKey, reducer as itemsReducer } from './store/items.reducer';
import { ItemsEffects } from './store/items.effects';
@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    StoreModule.forRoot({ [itemsFeatureKey]: itemsReducer }),
    EffectsModule.forRoot([ItemsEffects]),
  ],
  providers: [],
  bootstrap: [AppComponent]
})


export class AppModule { }


Component (app.component.ts)
In your component, you can now dispatch the loadItems action and subscribe to the items from the store:

import { Component, OnInit } from '@angular/core';
import { Store } from '@ngrx/store';
import { Observable } from 'rxjs';
import * as ItemsActions from './store/items.actions';
import * as fromItems from './store/items.reducer';
import * as ItemsSelectors from './store/items.selectors';
@Component({
  selector: 'app-root',
  template: `
    <div *ngFor="let item of items$ | async">
      {{ item }}
    </div>
  `,
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  items$: Observable<string[]>;

  constructor(private store: Store) {}

  ngOnInit() {
    this.store.dispatch(ItemsActions.loadItems());
    this.items$ = this.store.select(ItemsSelectors.selectItems);
  }
}
