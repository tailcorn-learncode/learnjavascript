This example will be a CRUD (Create, Read, Update, Delete) API for a Book entity.
kkkft
Model (Entity)

package com.example.demo.model;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Book {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String title;
    private String author;

    // getters and setters
}



DTO (Data Transfer Object)

package com.example.demo.dto;

public class BookDto {

    private Long id;
    private String title;
    private String author;

    // getters and setters
}


Repository

package com.example.demo.repository;

import com.example.demo.model.Book;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface BookRepository extends JpaRepository<Book, Long> {
}


Service

package com.example.demo.service;

import com.example.demo.dto.BookDto;
import com.example.demo.model.Book;
import com.example.demo.repository.BookRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class BookService {

    @Autowired
    private BookRepository bookRepository;

    public List<BookDto> getAllBooks() {
        return bookRepository.findAll().stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    public BookDto getBookById(Long id) {
        Book book = bookRepository.findById(id).orElseThrow(() -> new RuntimeException("Book not found"));
        return convertToDto(book);
    }

    public BookDto createBook(BookDto bookDto) {
        Book book = convertToEntity(bookDto);
        Book savedBook = bookRepository.save(book);
        return convertToDto(savedBook);
    }

    public void deleteBook(Long id) {
        bookRepository.deleteById(id);
    }

    private BookDto convertToDto(Book book) {
        BookDto bookDto = new BookDto();
        bookDto.setId(book.getId());
        bookDto.setTitle(book.getTitle());
        bookDto.setAuthor(book.getAuthor());
        return bookDto;
    }

    private Book convertToEntity(BookDto bookDto) {
        Book book = new Book();
        book.setTitle(bookDto.getTitle());
        book.setAuthor(bookDto.getAuthor());
        return book;
    }
}


Controller

package com.example.demo.controller;

import com.example.demo.dto.BookDto;
import com.example.demo.service.BookService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/books")
public class BookController {

    @Autowired
    private BookService bookService;

    @GetMapping
    public List<BookDto> getAllBooks() {
        return bookService.getAllBooks();
    }

    @GetMapping("/{id}")
    public BookDto getBookById(@PathVariable Long id) {
        return bookService.getBookById(id);
    }

    @PostMapping
    public BookDto createBook(@RequestBody BookDto bookDto) {
        return bookService.createBook(bookDto);
    }

    @DeleteMapping("/{id}")
    public void deleteBook(@PathVariable Long id) {
        bookService.deleteBook(id);
    }
}


Many to one example with Publisher


**DTO.

Publisher Model (Entity)
package com.example.demo.model;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import java.util.List;

@Entity
public class Publisher {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;

    @OneToMany(mappedBy = "publisher")
    private List<Book> books;

    // getters and setters
}


Book Model (Entity)


package com.example.demo.model;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;

@Entity
public class Book {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String title;
    private String author;

    @ManyToOne
    private Publisher publisher;

    // getters and setters
}


Publisher DTO

package com.example.demo.dto;

public class PublisherDto {

    private Long id;
    private String name;

    // getters and setters
}


Book DTO

package com.example.demo.dto;

public class BookDto {

    private Long id;
    private String title;
    private String author;
    private PublisherDto publisher;

    // getters and setters
}
In the Book entity, the @ManyToOne annotation is used to establish the Many-To-One relationship with the Publisher entity. In the Publisher entity, the @OneToMany annotation is used to establish the One-To-Many relationship with the Book entity. The mappedBy attribute in the @OneToMany annotation indicates that the publisher field in the Book entity is the owning side of the relationship.


Here are examples of both JPQL (Java Persistence Query Language) and native SQL queries using Spring Data JPA.

JPQL Query

JPQL queries are written in a syntax that is similar to SQL, but operates on entity objects rather than directly on database tables. 
Here's an example of a JPQL query in a Spring Data JPA repository:

package com.example.demo.repository;

import com.example.demo.model.Book;

import org.springframework.data.jpa.repository.JpaRepository;

import org.springframework.data.jpa.repository.Query;

import org.springframework.stereotype.Repository;

import java.util.List;

@Repository

public interface BookRepository extends JpaRepository<Book, Long> {

    @Query("SELECT b FROM Book b WHERE b.title = ?1")

    List<Book> findBooksByTitle(String title);

}

In this example, the findBooksByTitle method will return a list of Book entities that have the given title. The ?1 in the query is a placeholder for the first method parameter.

Native Query

Native queries are written in plain SQL and can be used when you need to perform more complex queries that are not easily supported by JPQL. 

Here's an example of a native query in a Spring Data JPA repository:

package com.example.demo.repository;

import com.example.demo.model.Book;

import org.springframework.data.jpa.repository.JpaRepository;

import org.springframework.data.jpa.repository.Query;

import org.springframework.stereotype.Repository;

import java.util.List;

@Repository

public interface BookRepository extends JpaRepository<Book, Long> {

    @Query(value = "SELECT * FROM books WHERE title = ?1", nativeQuery = true)

    List<Book> findBooksByTitle(String title);

}

In this example, the findBooksByTitle method will return a list of Book entities that have the given title. 
The query is written in plain SQL, and the nativeQuery = true attribute indicates that it is a native query. 
The ?1 in the query is a placeholder for the first method parameter.